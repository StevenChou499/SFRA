
Filter_Implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  080032a8  080032a8  000042a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a8  080036a8  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036a8  080036a8  000046a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036b0  080036b0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b0  080036b0  000046b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036b4  080036b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080036b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005060  2**0
                  CONTENTS
 10 .bss          0000411c  20000060  20000060  00005060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000417c  2000417c  00005060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d77  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016dc  00000000  00000000  0000ce07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  0000e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000547  00000000  00000000  0000ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a2c  00000000  00000000  0000f127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087c8  00000000  00000000  00031b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2181  00000000  00000000  0003a31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c49c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f30  00000000  00000000  0010c4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0010e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003290 	.word	0x08003290

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000064 	.word	0x20000064
 80001e8:	08003290 	.word	0x08003290

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <lpf_init>:
static lpf_t ac_lpf;

lpf_t *ac_lpf_p = &ac_lpf;

void lpf_init(lpf_t *lpf, float cut_off_freq_Hz, float samp_rate)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	ed87 0a02 	vstr	s0, [r7, #8]
 8000524:	edc7 0a01 	vstr	s1, [r7, #4]
	lpf->samp_rate = samp_rate;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	601a      	str	r2, [r3, #0]
	lpf->time_period = 1.0f / lpf->samp_rate;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	ed93 7a00 	vldr	s14, [r3]
 8000534:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	edc3 7a01 	vstr	s15, [r3, #4]
	lpf->w_c = 2.0f * PI * cut_off_freq_Hz;
 8000542:	edd7 7a02 	vldr	s15, [r7, #8]
 8000546:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000610 <lpf_init+0xf8>
 800054a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	edc3 7a02 	vstr	s15, [r3, #8]
	lpf->b0 = (lpf->w_c * lpf->time_period) / (2.0f + lpf->w_c * lpf->time_period);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	ed93 7a02 	vldr	s14, [r3, #8]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000560:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	ed93 7a02 	vldr	s14, [r3, #8]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000574:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000578:	ee37 7a87 	vadd.f32	s14, s15, s14
 800057c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	edc3 7a03 	vstr	s15, [r3, #12]
	lpf->b1 = (lpf->w_c * lpf->time_period) / (2.0f + lpf->w_c * lpf->time_period);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	ed93 7a02 	vldr	s14, [r3, #8]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000592:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	ed93 7a02 	vldr	s14, [r3, #8]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	edd3 7a01 	vldr	s15, [r3, #4]
 80005a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005a6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80005aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80005ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	edc3 7a04 	vstr	s15, [r3, #16]
	lpf->a1 = (lpf->w_c * lpf->time_period - 2.0f) / (lpf->w_c * lpf->time_period + 2.0f);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80005c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005c8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80005cc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80005dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005e0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80005e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80005e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	edc3 7a05 	vstr	s15, [r3, #20]

	lpf->last_input = 0.0f;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f04f 0200 	mov.w	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
	lpf->last_output = 0.0f;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f04f 0200 	mov.w	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40c90fdb 	.word	0x40c90fdb

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fa5b 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f84b 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8e3 	bl	80007ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f8b7 	bl	8000798 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  for (uint32_t i = 0U; i < 4000; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	e01f      	b.n	8000670 <main+0x5c>
	  input_signal_50Hz[i] = 200.0f * sinf(2.0f * PI * i / 2000.0f);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800063a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80006a0 <main+0x8c>
 800063e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000642:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80006a4 <main+0x90>
 8000646:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800064a:	eeb0 0a47 	vmov.f32	s0, s14
 800064e:	f001 fded 	bl	800222c <sinf>
 8000652:	eef0 7a40 	vmov.f32	s15, s0
 8000656:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80006a8 <main+0x94>
 800065a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800065e:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <main+0x98>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0U; i < 4000; i++) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3301      	adds	r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000676:	d3db      	bcc.n	8000630 <main+0x1c>
  }
  lpf_init(ac_lpf_p, 5.0f, 100e3f);
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <main+0x9c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80006b4 <main+0xa0>
 8000680:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff47 	bl	8000518 <lpf_init>
  sfra_init(100e3, 5, 2.0f);
 800068a:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800068e:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8000692:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80006b4 <main+0xa0>
 8000696:	f001 fce7 	bl	8002068 <sfra_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <main+0x86>
 800069e:	bf00      	nop
 80006a0:	40c90fdb 	.word	0x40c90fdb
 80006a4:	44fa0000 	.word	0x44fa0000
 80006a8:	43480000 	.word	0x43480000
 80006ac:	200000ec 	.word	0x200000ec
 80006b0:	20000000 	.word	0x20000000
 80006b4:	47c35000 	.word	0x47c35000

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	@ 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fd26 	bl	8002118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <SystemClock_Config+0xd8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000790 <SystemClock_Config+0xd8>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xd8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <SystemClock_Config+0xdc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a24      	ldr	r2, [pc, #144]	@ (8000794 <SystemClock_Config+0xdc>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <SystemClock_Config+0xdc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800072c:	23b4      	movs	r3, #180	@ 0xb4
 800072e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fd37 	bl	80011b0 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f8e2 	bl	8000910 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f000 fce0 	bl	8001110 <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000756:	f000 f8db 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2105      	movs	r1, #5
 8000778:	4618      	mov	r0, r3
 800077a:	f000 ff91 	bl	80016a0 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000784:	f000 f8c4 	bl	8000910 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	@ 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_USART3_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007d0:	f001 f986 	bl	8001ae0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f899 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000a4 	.word	0x200000a4
 80007e8:	40004800 	.word	0x40004800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b3e      	ldr	r3, [pc, #248]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a3d      	ldr	r2, [pc, #244]	@ (8000900 <MX_GPIO_Init+0x114>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b3b      	ldr	r3, [pc, #236]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b37      	ldr	r3, [pc, #220]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a36      	ldr	r2, [pc, #216]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b34      	ldr	r3, [pc, #208]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a2f      	ldr	r2, [pc, #188]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b2d      	ldr	r3, [pc, #180]	@ (8000900 <MX_GPIO_Init+0x114>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <MX_GPIO_Init+0x114>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a28      	ldr	r2, [pc, #160]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000878:	4822      	ldr	r0, [pc, #136]	@ (8000904 <MX_GPIO_Init+0x118>)
 800087a:	f000 fc2f 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	@ 0x40
 8000882:	4821      	ldr	r0, [pc, #132]	@ (8000908 <MX_GPIO_Init+0x11c>)
 8000884:	f000 fc2a 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	@ (800090c <MX_GPIO_Init+0x120>)
 80008a0:	f000 fa70 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	@ (8000904 <MX_GPIO_Init+0x118>)
 80008be:	f000 fa61 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	@ 0x40
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <MX_GPIO_Init+0x11c>)
 80008da:	f000 fa53 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_GPIO_Init+0x11c>)
 80008f2:	f000 fa47 	bl	8000d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	@ 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12c      	bne.n	80009e8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e4:	f000 f9ce 	bl	8000d84 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004800 	.word	0x40004800
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020c00 	.word	0x40020c00

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 f891 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a84:	f7ff ffea 	bl	8000a5c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f001 fb41 	bl	8002134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fdaf 	bl	8000614 <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ab8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ac4:	080036b8 	.word	0x080036b8
  ldr r2, =_sbss
 8000ac8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000acc:	2000417c 	.word	0x2000417c

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <HAL_Init+0x40>)
 8000ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <HAL_Init+0x40>)
 8000aea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	@ (8000b14 <HAL_Init+0x40>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f90d 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f808 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff ff08 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023c00 	.word	0x40023c00

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f917 	bl	8000d6a <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f8ed 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	2000000c 	.word	0x2000000c
 8000b74:	20000008 	.word	0x20000008

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	2000000c 	.word	0x2000000c
 8000b9c:	20003f6c 	.word	0x20003f6c

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20003f6c 	.word	0x20003f6c

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff47 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff5c 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffb0 	bl	8000cd8 <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e177      	b.n	8001090 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 8166 	bne.w	800108a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80c0 	beq.w	800108a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b66      	ldr	r3, [pc, #408]	@ (80010a8 <HAL_GPIO_Init+0x324>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	4a65      	ldr	r2, [pc, #404]	@ (80010a8 <HAL_GPIO_Init+0x324>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1a:	4b63      	ldr	r3, [pc, #396]	@ (80010a8 <HAL_GPIO_Init+0x324>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f26:	4a61      	ldr	r2, [pc, #388]	@ (80010ac <HAL_GPIO_Init+0x328>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a58      	ldr	r2, [pc, #352]	@ (80010b0 <HAL_GPIO_Init+0x32c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d037      	beq.n	8000fc2 <HAL_GPIO_Init+0x23e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a57      	ldr	r2, [pc, #348]	@ (80010b4 <HAL_GPIO_Init+0x330>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d031      	beq.n	8000fbe <HAL_GPIO_Init+0x23a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	@ (80010b8 <HAL_GPIO_Init+0x334>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x236>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a55      	ldr	r2, [pc, #340]	@ (80010bc <HAL_GPIO_Init+0x338>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x232>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a54      	ldr	r2, [pc, #336]	@ (80010c0 <HAL_GPIO_Init+0x33c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x22e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a53      	ldr	r2, [pc, #332]	@ (80010c4 <HAL_GPIO_Init+0x340>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x22a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a52      	ldr	r2, [pc, #328]	@ (80010c8 <HAL_GPIO_Init+0x344>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x226>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a51      	ldr	r2, [pc, #324]	@ (80010cc <HAL_GPIO_Init+0x348>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x222>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a50      	ldr	r2, [pc, #320]	@ (80010d0 <HAL_GPIO_Init+0x34c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x21e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4f      	ldr	r2, [pc, #316]	@ (80010d4 <HAL_GPIO_Init+0x350>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x21a>
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	e012      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	e010      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	e00e      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00c      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00a      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x240>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	@ (80010ac <HAL_GPIO_Init+0x328>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001006:	4a34      	ldr	r2, [pc, #208]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100c:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001030:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001036:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105a:	4a1f      	ldr	r2, [pc, #124]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <HAL_GPIO_Init+0x354>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f ae84 	bls.w	8000da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40021c00 	.word	0x40021c00
 80010d0:	40022000 	.word	0x40022000
 80010d4:	40022400 	.word	0x40022400
 80010d8:	40013c00 	.word	0x40013c00

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113c:	f7ff fd30 	bl	8000ba0 <HAL_GetTick>
 8001140:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001142:	e009      	b.n	8001158 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001144:	f7ff fd2c 	bl	8000ba0 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001152:	d901      	bls.n	8001158 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e01f      	b.n	8001198 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001164:	d1ee      	bne.n	8001144 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800116c:	f7ff fd18 	bl	8000ba0 <HAL_GetTick>
 8001170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001172:	e009      	b.n	8001188 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001174:	f7ff fd14 	bl	8000ba0 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001182:	d901      	bls.n	8001188 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e007      	b.n	8001198 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001194:	d1ee      	bne.n	8001174 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	420e0040 	.word	0x420e0040
 80011a8:	40007000 	.word	0x40007000
 80011ac:	420e0044 	.word	0x420e0044

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e267      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d075      	beq.n	80012ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ce:	4b88      	ldr	r3, [pc, #544]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d00c      	beq.n	80011f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011da:	4b85      	ldr	r3, [pc, #532]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d112      	bne.n	800120c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e6:	4b82      	ldr	r3, [pc, #520]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011f2:	d10b      	bne.n	800120c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	4b7e      	ldr	r3, [pc, #504]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d05b      	beq.n	80012b8 <HAL_RCC_OscConfig+0x108>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d157      	bne.n	80012b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e242      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001214:	d106      	bne.n	8001224 <HAL_RCC_OscConfig+0x74>
 8001216:	4b76      	ldr	r3, [pc, #472]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a75      	ldr	r2, [pc, #468]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x98>
 800122e:	4b70      	ldr	r3, [pc, #448]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6f      	ldr	r2, [pc, #444]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b6d      	ldr	r3, [pc, #436]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6c      	ldr	r2, [pc, #432]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001248:	4b69      	ldr	r3, [pc, #420]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a68      	ldr	r2, [pc, #416]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b66      	ldr	r3, [pc, #408]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a65      	ldr	r2, [pc, #404]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc9a 	bl	8000ba0 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc96 	bl	8000ba0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	@ 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e207      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b5b      	ldr	r3, [pc, #364]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xc0>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fc86 	bl	8000ba0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fc82 	bl	8000ba0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	@ 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1f3      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	4b51      	ldr	r3, [pc, #324]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0xe8>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d063      	beq.n	800138e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012c6:	4b4a      	ldr	r3, [pc, #296]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d2:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d11c      	bne.n	8001318 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012de:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	4b41      	ldr	r3, [pc, #260]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x152>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e1c7      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4937      	ldr	r1, [pc, #220]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	e03a      	b.n	800138e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d020      	beq.n	8001362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001320:	4b34      	ldr	r3, [pc, #208]	@ (80013f4 <HAL_RCC_OscConfig+0x244>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff fc3b 	bl	8000ba0 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fc37 	bl	8000ba0 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e1a8      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4925      	ldr	r1, [pc, #148]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <HAL_RCC_OscConfig+0x244>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fc1a 	bl	8000ba0 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fc16 	bl	8000ba0 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e187      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d036      	beq.n	8001408 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d016      	beq.n	80013d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_RCC_OscConfig+0x248>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff fbfa 	bl	8000ba0 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fbf6 	bl	8000ba0 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e167      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_RCC_OscConfig+0x240>)
 80013c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x200>
 80013ce:	e01b      	b.n	8001408 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_RCC_OscConfig+0x248>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fbe3 	bl	8000ba0 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e00e      	b.n	80013fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fbdf 	bl	8000ba0 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d907      	bls.n	80013fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e150      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
 80013f0:	40023800 	.word	0x40023800
 80013f4:	42470000 	.word	0x42470000
 80013f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	4b88      	ldr	r3, [pc, #544]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ea      	bne.n	80013de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8097 	beq.w	8001544 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141a:	4b81      	ldr	r3, [pc, #516]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10f      	bne.n	8001446 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b7d      	ldr	r3, [pc, #500]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a7c      	ldr	r2, [pc, #496]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b7a      	ldr	r3, [pc, #488]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b77      	ldr	r3, [pc, #476]	@ (8001624 <HAL_RCC_OscConfig+0x474>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001452:	4b74      	ldr	r3, [pc, #464]	@ (8001624 <HAL_RCC_OscConfig+0x474>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a73      	ldr	r2, [pc, #460]	@ (8001624 <HAL_RCC_OscConfig+0x474>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fb9f 	bl	8000ba0 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001466:	f7ff fb9b 	bl	8000ba0 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e10c      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <HAL_RCC_OscConfig+0x474>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x2ea>
 800148c:	4b64      	ldr	r3, [pc, #400]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001490:	4a63      	ldr	r2, [pc, #396]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	@ 0x70
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x324>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x30c>
 80014a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x324>
 80014bc:	4b58      	ldr	r3, [pc, #352]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c0:	4a57      	ldr	r2, [pc, #348]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c8:	4b55      	ldr	r3, [pc, #340]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014cc:	4a54      	ldr	r2, [pc, #336]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d015      	beq.n	8001508 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fb60 	bl	8000ba0 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff fb5c 	bl	8000ba0 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e0cb      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fa:	4b49      	ldr	r3, [pc, #292]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0ee      	beq.n	80014e4 <HAL_RCC_OscConfig+0x334>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff fb4a 	bl	8000ba0 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff fb46 	bl	8000ba0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0b5      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001526:	4b3e      	ldr	r3, [pc, #248]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ee      	bne.n	8001510 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	4b39      	ldr	r3, [pc, #228]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	4a38      	ldr	r2, [pc, #224]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 800153e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80a1 	beq.w	8001690 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800154e:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b08      	cmp	r3, #8
 8001558:	d05c      	beq.n	8001614 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d141      	bne.n	80015e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <HAL_RCC_OscConfig+0x478>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fb1a 	bl	8000ba0 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fb16 	bl	8000ba0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e087      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001582:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69da      	ldr	r2, [r3, #28]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159c:	019b      	lsls	r3, r3, #6
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	3b01      	subs	r3, #1
 80015a8:	041b      	lsls	r3, r3, #16
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	491b      	ldr	r1, [pc, #108]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_RCC_OscConfig+0x478>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff faef 	bl	8000ba0 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff faeb 	bl	8000ba0 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e05c      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x416>
 80015e4:	e054      	b.n	8001690 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fad8 	bl	8000ba0 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fad4 	bl	8000ba0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e045      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x444>
 8001612:	e03d      	b.n	8001690 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e038      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000
 8001628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_RCC_OscConfig+0x4ec>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d028      	beq.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d121      	bne.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d11a      	bne.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800165c:	4013      	ands	r3, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001664:	4293      	cmp	r3, r2
 8001666:	d111      	bne.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	3b01      	subs	r3, #1
 8001676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0cc      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b4:	4b68      	ldr	r3, [pc, #416]	@ (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d90c      	bls.n	80016dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b65      	ldr	r3, [pc, #404]	@ (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b63      	ldr	r3, [pc, #396]	@ (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0b8      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f4:	4b59      	ldr	r3, [pc, #356]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a58      	ldr	r2, [pc, #352]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800170c:	4b53      	ldr	r3, [pc, #332]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a52      	ldr	r2, [pc, #328]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001718:	4b50      	ldr	r3, [pc, #320]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	494d      	ldr	r1, [pc, #308]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d044      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d119      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e07f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d003      	beq.n	800175e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175a:	2b03      	cmp	r3, #3
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	4b3f      	ldr	r3, [pc, #252]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e06f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	4b3b      	ldr	r3, [pc, #236]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e067      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f023 0203 	bic.w	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4934      	ldr	r1, [pc, #208]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001790:	f7ff fa06 	bl	8000ba0 <HAL_GetTick>
 8001794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	e00a      	b.n	80017ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001798:	f7ff fa02 	bl	8000ba0 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e04f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 020c 	and.w	r2, r3, #12
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1eb      	bne.n	8001798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d20c      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e032      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4916      	ldr	r1, [pc, #88]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	490e      	ldr	r1, [pc, #56]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001826:	f000 f821 	bl	800186c <HAL_RCC_GetSysClockFreq>
 800182a:	4602      	mov	r2, r0
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	490a      	ldr	r1, [pc, #40]	@ (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	5ccb      	ldrb	r3, [r1, r3]
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f966 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00
 800185c:	40023800 	.word	0x40023800
 8001860:	080032a8 	.word	0x080032a8
 8001864:	20000004 	.word	0x20000004
 8001868:	20000008 	.word	0x20000008

0800186c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800186c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001870:	b094      	sub	sp, #80	@ 0x50
 8001872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001884:	4b79      	ldr	r3, [pc, #484]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d00d      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x40>
 8001890:	2b08      	cmp	r3, #8
 8001892:	f200 80e1 	bhi.w	8001a58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0x34>
 800189a:	2b04      	cmp	r3, #4
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800189e:	e0db      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a0:	4b73      	ldr	r3, [pc, #460]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x204>)
 80018a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018a4:	e0db      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018a6:	4b73      	ldr	r3, [pc, #460]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x208>)
 80018a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018aa:	e0d8      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ac:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d063      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	2200      	movs	r2, #0
 80018ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018de:	4622      	mov	r2, r4
 80018e0:	462b      	mov	r3, r5
 80018e2:	f04f 0000 	mov.w	r0, #0
 80018e6:	f04f 0100 	mov.w	r1, #0
 80018ea:	0159      	lsls	r1, r3, #5
 80018ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f0:	0150      	lsls	r0, r2, #5
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4621      	mov	r1, r4
 80018f8:	1a51      	subs	r1, r2, r1
 80018fa:	6139      	str	r1, [r7, #16]
 80018fc:	4629      	mov	r1, r5
 80018fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001910:	4659      	mov	r1, fp
 8001912:	018b      	lsls	r3, r1, #6
 8001914:	4651      	mov	r1, sl
 8001916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800191a:	4651      	mov	r1, sl
 800191c:	018a      	lsls	r2, r1, #6
 800191e:	4651      	mov	r1, sl
 8001920:	ebb2 0801 	subs.w	r8, r2, r1
 8001924:	4659      	mov	r1, fp
 8001926:	eb63 0901 	sbc.w	r9, r3, r1
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800193a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800193e:	4690      	mov	r8, r2
 8001940:	4699      	mov	r9, r3
 8001942:	4623      	mov	r3, r4
 8001944:	eb18 0303 	adds.w	r3, r8, r3
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	462b      	mov	r3, r5
 800194c:	eb49 0303 	adc.w	r3, r9, r3
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800195e:	4629      	mov	r1, r5
 8001960:	024b      	lsls	r3, r1, #9
 8001962:	4621      	mov	r1, r4
 8001964:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001968:	4621      	mov	r1, r4
 800196a:	024a      	lsls	r2, r1, #9
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001972:	2200      	movs	r2, #0
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800197c:	f7fe fc36 	bl	80001ec <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001988:	e058      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b38      	ldr	r3, [pc, #224]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	2200      	movs	r2, #0
 8001992:	4618      	mov	r0, r3
 8001994:	4611      	mov	r1, r2
 8001996:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019a4:	4642      	mov	r2, r8
 80019a6:	464b      	mov	r3, r9
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	f04f 0100 	mov.w	r1, #0
 80019b0:	0159      	lsls	r1, r3, #5
 80019b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b6:	0150      	lsls	r0, r2, #5
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4641      	mov	r1, r8
 80019be:	ebb2 0a01 	subs.w	sl, r2, r1
 80019c2:	4649      	mov	r1, r9
 80019c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019dc:	ebb2 040a 	subs.w	r4, r2, sl
 80019e0:	eb63 050b 	sbc.w	r5, r3, fp
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	00eb      	lsls	r3, r5, #3
 80019ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f2:	00e2      	lsls	r2, r4, #3
 80019f4:	4614      	mov	r4, r2
 80019f6:	461d      	mov	r5, r3
 80019f8:	4643      	mov	r3, r8
 80019fa:	18e3      	adds	r3, r4, r3
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	464b      	mov	r3, r9
 8001a00:	eb45 0303 	adc.w	r3, r5, r3
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a12:	4629      	mov	r1, r5
 8001a14:	028b      	lsls	r3, r1, #10
 8001a16:	4621      	mov	r1, r4
 8001a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	028a      	lsls	r2, r1, #10
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a26:	2200      	movs	r2, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	61fa      	str	r2, [r7, #28]
 8001a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a30:	f7fe fbdc 	bl	80001ec <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	3301      	adds	r3, #1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a56:	e002      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3750      	adds	r7, #80	@ 0x50
 8001a64:	46bd      	mov	sp, r7
 8001a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	00f42400 	.word	0x00f42400
 8001a74:	007a1200 	.word	0x007a1200

08001a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a94:	f7ff fff0 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	0a9b      	lsrs	r3, r3, #10
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	@ (8001ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	080032b8 	.word	0x080032b8

08001ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001abc:	f7ff ffdc 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0b5b      	lsrs	r3, r3, #13
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	@ (8001adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	080032b8 	.word	0x080032b8

08001ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e042      	b.n	8001b78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7fe ff30 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2224      	movs	r2, #36	@ 0x24
 8001b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f82b 	bl	8001b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b0c0      	sub	sp, #256	@ 0x100
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b9c:	68d9      	ldr	r1, [r3, #12]
 8001b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	ea40 0301 	orr.w	r3, r0, r1
 8001ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001bd8:	f021 010c 	bic.w	r1, r1, #12
 8001bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001be6:	430b      	orrs	r3, r1
 8001be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bfa:	6999      	ldr	r1, [r3, #24]
 8001bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	ea40 0301 	orr.w	r3, r0, r1
 8001c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b8f      	ldr	r3, [pc, #572]	@ (8001e4c <UART_SetConfig+0x2cc>)
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d005      	beq.n	8001c20 <UART_SetConfig+0xa0>
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8001e50 <UART_SetConfig+0x2d0>)
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d104      	bne.n	8001c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c20:	f7ff ff4a 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8001c24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001c28:	e003      	b.n	8001c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c2a:	f7ff ff31 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8001c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c3c:	f040 810c 	bne.w	8001e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c44:	2200      	movs	r2, #0
 8001c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c52:	4622      	mov	r2, r4
 8001c54:	462b      	mov	r3, r5
 8001c56:	1891      	adds	r1, r2, r2
 8001c58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c5a:	415b      	adcs	r3, r3
 8001c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c62:	4621      	mov	r1, r4
 8001c64:	eb12 0801 	adds.w	r8, r2, r1
 8001c68:	4629      	mov	r1, r5
 8001c6a:	eb43 0901 	adc.w	r9, r3, r1
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c82:	4690      	mov	r8, r2
 8001c84:	4699      	mov	r9, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	eb18 0303 	adds.w	r3, r8, r3
 8001c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c90:	462b      	mov	r3, r5
 8001c92:	eb49 0303 	adc.w	r3, r9, r3
 8001c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001cae:	460b      	mov	r3, r1
 8001cb0:	18db      	adds	r3, r3, r3
 8001cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	eb42 0303 	adc.w	r3, r2, r3
 8001cba:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001cc4:	f7fe fa92 	bl	80001ec <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4b61      	ldr	r3, [pc, #388]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001cce:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	011c      	lsls	r4, r3, #4
 8001cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ce8:	4642      	mov	r2, r8
 8001cea:	464b      	mov	r3, r9
 8001cec:	1891      	adds	r1, r2, r2
 8001cee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001cf0:	415b      	adcs	r3, r3
 8001cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8001cfe:	4649      	mov	r1, r9
 8001d00:	eb43 0b01 	adc.w	fp, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d18:	4692      	mov	sl, r2
 8001d1a:	469b      	mov	fp, r3
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8001d22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d26:	464b      	mov	r3, r9
 8001d28:	eb4b 0303 	adc.w	r3, fp, r3
 8001d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001d44:	460b      	mov	r3, r1
 8001d46:	18db      	adds	r3, r3, r3
 8001d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	eb42 0303 	adc.w	r3, r2, r3
 8001d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d5a:	f7fe fa47 	bl	80001ec <__aeabi_uldivmod>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	4b3b      	ldr	r3, [pc, #236]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001d66:	fba3 2301 	umull	r2, r3, r3, r1
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2264      	movs	r2, #100	@ 0x64
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	1acb      	subs	r3, r1, r3
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d7a:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d88:	441c      	add	r4, r3
 8001d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	464b      	mov	r3, r9
 8001da0:	1891      	adds	r1, r2, r2
 8001da2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001da4:	415b      	adcs	r3, r3
 8001da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001dac:	4641      	mov	r1, r8
 8001dae:	1851      	adds	r1, r2, r1
 8001db0:	6339      	str	r1, [r7, #48]	@ 0x30
 8001db2:	4649      	mov	r1, r9
 8001db4:	414b      	adcs	r3, r1
 8001db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	00cb      	lsls	r3, r1, #3
 8001dc8:	4651      	mov	r1, sl
 8001dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dce:	4651      	mov	r1, sl
 8001dd0:	00ca      	lsls	r2, r1, #3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4642      	mov	r2, r8
 8001dda:	189b      	adds	r3, r3, r2
 8001ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001de0:	464b      	mov	r3, r9
 8001de2:	460a      	mov	r2, r1
 8001de4:	eb42 0303 	adc.w	r3, r2, r3
 8001de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001df8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e00:	460b      	mov	r3, r1
 8001e02:	18db      	adds	r3, r3, r3
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e06:	4613      	mov	r3, r2
 8001e08:	eb42 0303 	adc.w	r3, r2, r3
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001e16:	f7fe f9e9 	bl	80001ec <__aeabi_uldivmod>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001e20:	fba3 1302 	umull	r1, r3, r3, r2
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	2164      	movs	r1, #100	@ 0x64
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	3332      	adds	r3, #50	@ 0x32
 8001e32:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <UART_SetConfig+0x2d4>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	f003 0207 	and.w	r2, r3, #7
 8001e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4422      	add	r2, r4
 8001e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e48:	e106      	b.n	8002058 <UART_SetConfig+0x4d8>
 8001e4a:	bf00      	nop
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40011400 	.word	0x40011400
 8001e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e6a:	4642      	mov	r2, r8
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	1891      	adds	r1, r2, r2
 8001e70:	6239      	str	r1, [r7, #32]
 8001e72:	415b      	adcs	r3, r3
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	1854      	adds	r4, r2, r1
 8001e7e:	4649      	mov	r1, r9
 8001e80:	eb43 0501 	adc.w	r5, r3, r1
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	00eb      	lsls	r3, r5, #3
 8001e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e92:	00e2      	lsls	r2, r4, #3
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	18e3      	adds	r3, r4, r3
 8001e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	eb45 0303 	adc.w	r3, r5, r3
 8001ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	008b      	lsls	r3, r1, #2
 8001eca:	4621      	mov	r1, r4
 8001ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	008a      	lsls	r2, r1, #2
 8001ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001ed8:	f7fe f988 	bl	80001ec <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4b60      	ldr	r3, [pc, #384]	@ (8002064 <UART_SetConfig+0x4e4>)
 8001ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	011c      	lsls	r4, r3, #4
 8001eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001efc:	4642      	mov	r2, r8
 8001efe:	464b      	mov	r3, r9
 8001f00:	1891      	adds	r1, r2, r2
 8001f02:	61b9      	str	r1, [r7, #24]
 8001f04:	415b      	adcs	r3, r3
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	1851      	adds	r1, r2, r1
 8001f10:	6139      	str	r1, [r7, #16]
 8001f12:	4649      	mov	r1, r9
 8001f14:	414b      	adcs	r3, r1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f24:	4659      	mov	r1, fp
 8001f26:	00cb      	lsls	r3, r1, #3
 8001f28:	4651      	mov	r1, sl
 8001f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f2e:	4651      	mov	r1, sl
 8001f30:	00ca      	lsls	r2, r1, #3
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	4642      	mov	r2, r8
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f40:	464b      	mov	r3, r9
 8001f42:	460a      	mov	r2, r1
 8001f44:	eb42 0303 	adc.w	r3, r2, r3
 8001f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f64:	4649      	mov	r1, r9
 8001f66:	008b      	lsls	r3, r1, #2
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f6e:	4641      	mov	r1, r8
 8001f70:	008a      	lsls	r2, r1, #2
 8001f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f76:	f7fe f939 	bl	80001ec <__aeabi_uldivmod>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4b38      	ldr	r3, [pc, #224]	@ (8002064 <UART_SetConfig+0x4e4>)
 8001f82:	fba3 2301 	umull	r2, r3, r3, r1
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2264      	movs	r2, #100	@ 0x64
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	1acb      	subs	r3, r1, r3
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	3332      	adds	r3, #50	@ 0x32
 8001f94:	4a33      	ldr	r2, [pc, #204]	@ (8002064 <UART_SetConfig+0x4e4>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa0:	441c      	add	r4, r3
 8001fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001faa:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	1891      	adds	r1, r2, r2
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	415b      	adcs	r3, r3
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc0:	4641      	mov	r1, r8
 8001fc2:	1851      	adds	r1, r2, r1
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	414b      	adcs	r3, r1
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fd8:	4659      	mov	r1, fp
 8001fda:	00cb      	lsls	r3, r1, #3
 8001fdc:	4651      	mov	r1, sl
 8001fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fe2:	4651      	mov	r1, sl
 8001fe4:	00ca      	lsls	r2, r1, #3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	4642      	mov	r2, r8
 8001fee:	189b      	adds	r3, r3, r2
 8001ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	eb42 0303 	adc.w	r3, r2, r3
 8001ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	663b      	str	r3, [r7, #96]	@ 0x60
 8002006:	667a      	str	r2, [r7, #100]	@ 0x64
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002014:	4649      	mov	r1, r9
 8002016:	008b      	lsls	r3, r1, #2
 8002018:	4641      	mov	r1, r8
 800201a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800201e:	4641      	mov	r1, r8
 8002020:	008a      	lsls	r2, r1, #2
 8002022:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002026:	f7fe f8e1 	bl	80001ec <__aeabi_uldivmod>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4b0d      	ldr	r3, [pc, #52]	@ (8002064 <UART_SetConfig+0x4e4>)
 8002030:	fba3 1302 	umull	r1, r3, r3, r2
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	2164      	movs	r1, #100	@ 0x64
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	3332      	adds	r3, #50	@ 0x32
 8002042:	4a08      	ldr	r2, [pc, #32]	@ (8002064 <UART_SetConfig+0x4e4>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4422      	add	r2, r4
 8002056:	609a      	str	r2, [r3, #8]
}
 8002058:	bf00      	nop
 800205a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800205e:	46bd      	mov	sp, r7
 8002060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002064:	51eb851f 	.word	0x51eb851f

08002068 <sfra_init>:
#include <string.h>

sfra_t sfra;

uint8_t sfra_init(float sampling_rate_Hz, float freq_start, float freq_step)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002072:	edc7 0a02 	vstr	s1, [r7, #8]
 8002076:	ed87 1a01 	vstr	s2, [r7, #4]
	sfra.sampling_freq_Hz = sampling_rate_Hz;
 800207a:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <sfra_init+0xa0>)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sfra.freq_start = freq_start;
 8002082:	4a21      	ldr	r2, [pc, #132]	@ (8002108 <sfra_init+0xa0>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
	sfra.freq_step = freq_step;
 800208a:	4a1f      	ldr	r2, [pc, #124]	@ (8002108 <sfra_init+0xa0>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
	memset(sfra.mag_in, 0U, sizeof(float) * BODE_PLOT_POINTS);
 8002092:	2228      	movs	r2, #40	@ 0x28
 8002094:	2100      	movs	r1, #0
 8002096:	481c      	ldr	r0, [pc, #112]	@ (8002108 <sfra_init+0xa0>)
 8002098:	f000 f83e 	bl	8002118 <memset>
	memset(sfra.pha_in, 0U, sizeof(float) * BODE_PLOT_POINTS);
 800209c:	2228      	movs	r2, #40	@ 0x28
 800209e:	2100      	movs	r1, #0
 80020a0:	481a      	ldr	r0, [pc, #104]	@ (800210c <sfra_init+0xa4>)
 80020a2:	f000 f839 	bl	8002118 <memset>
	memset(sfra.mag_out, 0U, sizeof(float) * BODE_PLOT_POINTS);
 80020a6:	2228      	movs	r2, #40	@ 0x28
 80020a8:	2100      	movs	r1, #0
 80020aa:	4819      	ldr	r0, [pc, #100]	@ (8002110 <sfra_init+0xa8>)
 80020ac:	f000 f834 	bl	8002118 <memset>
	memset(sfra.pha_out, 0U, sizeof(float) * BODE_PLOT_POINTS);
 80020b0:	2228      	movs	r2, #40	@ 0x28
 80020b2:	2100      	movs	r1, #0
 80020b4:	4817      	ldr	r0, [pc, #92]	@ (8002114 <sfra_init+0xac>)
 80020b6:	f000 f82f 	bl	8002118 <memset>
	for (uint8_t i = 0U; i < BODE_PLOT_POINTS; i++) {
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
 80020be:	e01a      	b.n	80020f6 <sfra_init+0x8e>
		sfra.freq_table[i] = freq_start * powf(freq_step, (float)i);
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	eef0 0a67 	vmov.f32	s1, s15
 80020ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80020d2:	f000 f853 	bl	800217c <powf>
 80020d6:	eeb0 7a40 	vmov.f32	s14, s0
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e4:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <sfra_init+0xa0>)
 80020e6:	332a      	adds	r3, #42	@ 0x2a
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0U; i < BODE_PLOT_POINTS; i++) {
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	3301      	adds	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	2b09      	cmp	r3, #9
 80020fa:	d9e1      	bls.n	80020c0 <sfra_init+0x58>
	}
}
 80020fc:	bf00      	nop
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20003f70 	.word	0x20003f70
 800210c:	20003f98 	.word	0x20003f98
 8002110:	20003fc0 	.word	0x20003fc0
 8002114:	20003fe8 	.word	0x20003fe8

08002118 <memset>:
 8002118:	4402      	add	r2, r0
 800211a:	4603      	mov	r3, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <memset+0xa>
 8002120:	4770      	bx	lr
 8002122:	f803 1b01 	strb.w	r1, [r3], #1
 8002126:	e7f9      	b.n	800211c <memset+0x4>

08002128 <__errno>:
 8002128:	4b01      	ldr	r3, [pc, #4]	@ (8002130 <__errno+0x8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000010 	.word	0x20000010

08002134 <__libc_init_array>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	4d0d      	ldr	r5, [pc, #52]	@ (800216c <__libc_init_array+0x38>)
 8002138:	4c0d      	ldr	r4, [pc, #52]	@ (8002170 <__libc_init_array+0x3c>)
 800213a:	1b64      	subs	r4, r4, r5
 800213c:	10a4      	asrs	r4, r4, #2
 800213e:	2600      	movs	r6, #0
 8002140:	42a6      	cmp	r6, r4
 8002142:	d109      	bne.n	8002158 <__libc_init_array+0x24>
 8002144:	4d0b      	ldr	r5, [pc, #44]	@ (8002174 <__libc_init_array+0x40>)
 8002146:	4c0c      	ldr	r4, [pc, #48]	@ (8002178 <__libc_init_array+0x44>)
 8002148:	f001 f8a2 	bl	8003290 <_init>
 800214c:	1b64      	subs	r4, r4, r5
 800214e:	10a4      	asrs	r4, r4, #2
 8002150:	2600      	movs	r6, #0
 8002152:	42a6      	cmp	r6, r4
 8002154:	d105      	bne.n	8002162 <__libc_init_array+0x2e>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f855 3b04 	ldr.w	r3, [r5], #4
 800215c:	4798      	blx	r3
 800215e:	3601      	adds	r6, #1
 8002160:	e7ee      	b.n	8002140 <__libc_init_array+0xc>
 8002162:	f855 3b04 	ldr.w	r3, [r5], #4
 8002166:	4798      	blx	r3
 8002168:	3601      	adds	r6, #1
 800216a:	e7f2      	b.n	8002152 <__libc_init_array+0x1e>
 800216c:	080036b0 	.word	0x080036b0
 8002170:	080036b0 	.word	0x080036b0
 8002174:	080036b0 	.word	0x080036b0
 8002178:	080036b4 	.word	0x080036b4

0800217c <powf>:
 800217c:	b508      	push	{r3, lr}
 800217e:	ed2d 8b04 	vpush	{d8-d9}
 8002182:	eeb0 8a60 	vmov.f32	s16, s1
 8002186:	eeb0 9a40 	vmov.f32	s18, s0
 800218a:	f000 f93f 	bl	800240c <__ieee754_powf>
 800218e:	eeb4 8a48 	vcmp.f32	s16, s16
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	eef0 8a40 	vmov.f32	s17, s0
 800219a:	d63e      	bvs.n	800221a <powf+0x9e>
 800219c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	d112      	bne.n	80021cc <powf+0x50>
 80021a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80021aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ae:	d039      	beq.n	8002224 <powf+0xa8>
 80021b0:	eeb0 0a48 	vmov.f32	s0, s16
 80021b4:	f000 f880 	bl	80022b8 <finitef>
 80021b8:	b378      	cbz	r0, 800221a <powf+0x9e>
 80021ba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d52a      	bpl.n	800221a <powf+0x9e>
 80021c4:	f7ff ffb0 	bl	8002128 <__errno>
 80021c8:	2322      	movs	r3, #34	@ 0x22
 80021ca:	e014      	b.n	80021f6 <powf+0x7a>
 80021cc:	f000 f874 	bl	80022b8 <finitef>
 80021d0:	b998      	cbnz	r0, 80021fa <powf+0x7e>
 80021d2:	eeb0 0a49 	vmov.f32	s0, s18
 80021d6:	f000 f86f 	bl	80022b8 <finitef>
 80021da:	b170      	cbz	r0, 80021fa <powf+0x7e>
 80021dc:	eeb0 0a48 	vmov.f32	s0, s16
 80021e0:	f000 f86a 	bl	80022b8 <finitef>
 80021e4:	b148      	cbz	r0, 80021fa <powf+0x7e>
 80021e6:	eef4 8a68 	vcmp.f32	s17, s17
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	d7e9      	bvc.n	80021c4 <powf+0x48>
 80021f0:	f7ff ff9a 	bl	8002128 <__errno>
 80021f4:	2321      	movs	r3, #33	@ 0x21
 80021f6:	6003      	str	r3, [r0, #0]
 80021f8:	e00f      	b.n	800221a <powf+0x9e>
 80021fa:	eef5 8a40 	vcmp.f32	s17, #0.0
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	d10a      	bne.n	800221a <powf+0x9e>
 8002204:	eeb0 0a49 	vmov.f32	s0, s18
 8002208:	f000 f856 	bl	80022b8 <finitef>
 800220c:	b128      	cbz	r0, 800221a <powf+0x9e>
 800220e:	eeb0 0a48 	vmov.f32	s0, s16
 8002212:	f000 f851 	bl	80022b8 <finitef>
 8002216:	2800      	cmp	r0, #0
 8002218:	d1d4      	bne.n	80021c4 <powf+0x48>
 800221a:	eeb0 0a68 	vmov.f32	s0, s17
 800221e:	ecbd 8b04 	vpop	{d8-d9}
 8002222:	bd08      	pop	{r3, pc}
 8002224:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8002228:	e7f7      	b.n	800221a <powf+0x9e>
	...

0800222c <sinf>:
 800222c:	ee10 3a10 	vmov	r3, s0
 8002230:	b507      	push	{r0, r1, r2, lr}
 8002232:	4a1f      	ldr	r2, [pc, #124]	@ (80022b0 <sinf+0x84>)
 8002234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002238:	4293      	cmp	r3, r2
 800223a:	d807      	bhi.n	800224c <sinf+0x20>
 800223c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80022b4 <sinf+0x88>
 8002240:	2000      	movs	r0, #0
 8002242:	b003      	add	sp, #12
 8002244:	f85d eb04 	ldr.w	lr, [sp], #4
 8002248:	f000 b898 	b.w	800237c <__kernel_sinf>
 800224c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8002250:	d304      	bcc.n	800225c <sinf+0x30>
 8002252:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002256:	b003      	add	sp, #12
 8002258:	f85d fb04 	ldr.w	pc, [sp], #4
 800225c:	4668      	mov	r0, sp
 800225e:	f000 fba3 	bl	80029a8 <__ieee754_rem_pio2f>
 8002262:	f000 0003 	and.w	r0, r0, #3
 8002266:	2801      	cmp	r0, #1
 8002268:	d00a      	beq.n	8002280 <sinf+0x54>
 800226a:	2802      	cmp	r0, #2
 800226c:	d00f      	beq.n	800228e <sinf+0x62>
 800226e:	b9c0      	cbnz	r0, 80022a2 <sinf+0x76>
 8002270:	eddd 0a01 	vldr	s1, [sp, #4]
 8002274:	ed9d 0a00 	vldr	s0, [sp]
 8002278:	2001      	movs	r0, #1
 800227a:	f000 f87f 	bl	800237c <__kernel_sinf>
 800227e:	e7ea      	b.n	8002256 <sinf+0x2a>
 8002280:	eddd 0a01 	vldr	s1, [sp, #4]
 8002284:	ed9d 0a00 	vldr	s0, [sp]
 8002288:	f000 f820 	bl	80022cc <__kernel_cosf>
 800228c:	e7e3      	b.n	8002256 <sinf+0x2a>
 800228e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002292:	ed9d 0a00 	vldr	s0, [sp]
 8002296:	2001      	movs	r0, #1
 8002298:	f000 f870 	bl	800237c <__kernel_sinf>
 800229c:	eeb1 0a40 	vneg.f32	s0, s0
 80022a0:	e7d9      	b.n	8002256 <sinf+0x2a>
 80022a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80022a6:	ed9d 0a00 	vldr	s0, [sp]
 80022aa:	f000 f80f 	bl	80022cc <__kernel_cosf>
 80022ae:	e7f5      	b.n	800229c <sinf+0x70>
 80022b0:	3f490fd8 	.word	0x3f490fd8
 80022b4:	00000000 	.word	0x00000000

080022b8 <finitef>:
 80022b8:	ee10 3a10 	vmov	r3, s0
 80022bc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80022c0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80022c4:	bfac      	ite	ge
 80022c6:	2000      	movge	r0, #0
 80022c8:	2001      	movlt	r0, #1
 80022ca:	4770      	bx	lr

080022cc <__kernel_cosf>:
 80022cc:	ee10 3a10 	vmov	r3, s0
 80022d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022d4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80022d8:	eef0 6a40 	vmov.f32	s13, s0
 80022dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80022e0:	d204      	bcs.n	80022ec <__kernel_cosf+0x20>
 80022e2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80022e6:	ee17 2a90 	vmov	r2, s15
 80022ea:	b342      	cbz	r2, 800233e <__kernel_cosf+0x72>
 80022ec:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80022f0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800235c <__kernel_cosf+0x90>
 80022f4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8002360 <__kernel_cosf+0x94>
 80022f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002364 <__kernel_cosf+0x98>)
 80022fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80022fe:	4293      	cmp	r3, r2
 8002300:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002368 <__kernel_cosf+0x9c>
 8002304:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002308:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800236c <__kernel_cosf+0xa0>
 800230c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002310:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002370 <__kernel_cosf+0xa4>
 8002314:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002318:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8002374 <__kernel_cosf+0xa8>
 800231c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002320:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8002324:	ee26 6a07 	vmul.f32	s12, s12, s14
 8002328:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800232c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8002330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002334:	d804      	bhi.n	8002340 <__kernel_cosf+0x74>
 8002336:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800233a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800233e:	4770      	bx	lr
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <__kernel_cosf+0xac>)
 8002342:	4293      	cmp	r3, r2
 8002344:	bf9a      	itte	ls
 8002346:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800234a:	ee07 3a10 	vmovls	s14, r3
 800234e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8002352:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800235a:	e7ec      	b.n	8002336 <__kernel_cosf+0x6a>
 800235c:	ad47d74e 	.word	0xad47d74e
 8002360:	310f74f6 	.word	0x310f74f6
 8002364:	3e999999 	.word	0x3e999999
 8002368:	b493f27c 	.word	0xb493f27c
 800236c:	37d00d01 	.word	0x37d00d01
 8002370:	bab60b61 	.word	0xbab60b61
 8002374:	3d2aaaab 	.word	0x3d2aaaab
 8002378:	3f480000 	.word	0x3f480000

0800237c <__kernel_sinf>:
 800237c:	ee10 3a10 	vmov	r3, s0
 8002380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002384:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8002388:	d204      	bcs.n	8002394 <__kernel_sinf+0x18>
 800238a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800238e:	ee17 3a90 	vmov	r3, s15
 8002392:	b35b      	cbz	r3, 80023ec <__kernel_sinf+0x70>
 8002394:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002398:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80023f0 <__kernel_sinf+0x74>
 800239c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80023f4 <__kernel_sinf+0x78>
 80023a0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80023a4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80023f8 <__kernel_sinf+0x7c>
 80023a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80023ac:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80023fc <__kernel_sinf+0x80>
 80023b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80023b4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002400 <__kernel_sinf+0x84>
 80023b8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80023bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80023c0:	b930      	cbnz	r0, 80023d0 <__kernel_sinf+0x54>
 80023c2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8002404 <__kernel_sinf+0x88>
 80023c6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80023ca:	eea6 0a26 	vfma.f32	s0, s12, s13
 80023ce:	4770      	bx	lr
 80023d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80023d4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80023d8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80023dc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80023e0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8002408 <__kernel_sinf+0x8c>
 80023e4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80023e8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	2f2ec9d3 	.word	0x2f2ec9d3
 80023f4:	b2d72f34 	.word	0xb2d72f34
 80023f8:	3638ef1b 	.word	0x3638ef1b
 80023fc:	b9500d01 	.word	0xb9500d01
 8002400:	3c088889 	.word	0x3c088889
 8002404:	be2aaaab 	.word	0xbe2aaaab
 8002408:	3e2aaaab 	.word	0x3e2aaaab

0800240c <__ieee754_powf>:
 800240c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002410:	ee10 4a90 	vmov	r4, s1
 8002414:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8002418:	ed2d 8b02 	vpush	{d8}
 800241c:	ee10 6a10 	vmov	r6, s0
 8002420:	eeb0 8a40 	vmov.f32	s16, s0
 8002424:	eef0 8a60 	vmov.f32	s17, s1
 8002428:	d10c      	bne.n	8002444 <__ieee754_powf+0x38>
 800242a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800242e:	0076      	lsls	r6, r6, #1
 8002430:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8002434:	f240 8274 	bls.w	8002920 <__ieee754_powf+0x514>
 8002438:	ee38 0a28 	vadd.f32	s0, s16, s17
 800243c:	ecbd 8b02 	vpop	{d8}
 8002440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002444:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8002448:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800244c:	d802      	bhi.n	8002454 <__ieee754_powf+0x48>
 800244e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8002452:	d908      	bls.n	8002466 <__ieee754_powf+0x5a>
 8002454:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8002458:	d1ee      	bne.n	8002438 <__ieee754_powf+0x2c>
 800245a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800245e:	0064      	lsls	r4, r4, #1
 8002460:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8002464:	e7e6      	b.n	8002434 <__ieee754_powf+0x28>
 8002466:	2e00      	cmp	r6, #0
 8002468:	da1f      	bge.n	80024aa <__ieee754_powf+0x9e>
 800246a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800246e:	f080 8260 	bcs.w	8002932 <__ieee754_powf+0x526>
 8002472:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8002476:	d32f      	bcc.n	80024d8 <__ieee754_powf+0xcc>
 8002478:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800247c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8002480:	fa49 f503 	asr.w	r5, r9, r3
 8002484:	fa05 f303 	lsl.w	r3, r5, r3
 8002488:	454b      	cmp	r3, r9
 800248a:	d123      	bne.n	80024d4 <__ieee754_powf+0xc8>
 800248c:	f005 0501 	and.w	r5, r5, #1
 8002490:	f1c5 0502 	rsb	r5, r5, #2
 8002494:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8002498:	d11f      	bne.n	80024da <__ieee754_powf+0xce>
 800249a:	2c00      	cmp	r4, #0
 800249c:	f280 8246 	bge.w	800292c <__ieee754_powf+0x520>
 80024a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80024a4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80024a8:	e7c8      	b.n	800243c <__ieee754_powf+0x30>
 80024aa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80024ae:	d111      	bne.n	80024d4 <__ieee754_powf+0xc8>
 80024b0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80024b4:	f000 8234 	beq.w	8002920 <__ieee754_powf+0x514>
 80024b8:	d906      	bls.n	80024c8 <__ieee754_powf+0xbc>
 80024ba:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80027d0 <__ieee754_powf+0x3c4>
 80024be:	2c00      	cmp	r4, #0
 80024c0:	bfa8      	it	ge
 80024c2:	eeb0 0a68 	vmovge.f32	s0, s17
 80024c6:	e7b9      	b.n	800243c <__ieee754_powf+0x30>
 80024c8:	2c00      	cmp	r4, #0
 80024ca:	f280 822c 	bge.w	8002926 <__ieee754_powf+0x51a>
 80024ce:	eeb1 0a68 	vneg.f32	s0, s17
 80024d2:	e7b3      	b.n	800243c <__ieee754_powf+0x30>
 80024d4:	2500      	movs	r5, #0
 80024d6:	e7dd      	b.n	8002494 <__ieee754_powf+0x88>
 80024d8:	2500      	movs	r5, #0
 80024da:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80024de:	d102      	bne.n	80024e6 <__ieee754_powf+0xda>
 80024e0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80024e4:	e7aa      	b.n	800243c <__ieee754_powf+0x30>
 80024e6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80024ea:	f040 8227 	bne.w	800293c <__ieee754_powf+0x530>
 80024ee:	2e00      	cmp	r6, #0
 80024f0:	f2c0 8224 	blt.w	800293c <__ieee754_powf+0x530>
 80024f4:	eeb0 0a48 	vmov.f32	s0, s16
 80024f8:	ecbd 8b02 	vpop	{d8}
 80024fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002500:	f000 bc16 	b.w	8002d30 <__ieee754_sqrtf>
 8002504:	2d01      	cmp	r5, #1
 8002506:	d199      	bne.n	800243c <__ieee754_powf+0x30>
 8002508:	eeb1 0a40 	vneg.f32	s0, s0
 800250c:	e796      	b.n	800243c <__ieee754_powf+0x30>
 800250e:	0ff0      	lsrs	r0, r6, #31
 8002510:	3801      	subs	r0, #1
 8002512:	ea55 0300 	orrs.w	r3, r5, r0
 8002516:	d104      	bne.n	8002522 <__ieee754_powf+0x116>
 8002518:	ee38 8a48 	vsub.f32	s16, s16, s16
 800251c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002520:	e78c      	b.n	800243c <__ieee754_powf+0x30>
 8002522:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8002526:	d96d      	bls.n	8002604 <__ieee754_powf+0x1f8>
 8002528:	4baa      	ldr	r3, [pc, #680]	@ (80027d4 <__ieee754_powf+0x3c8>)
 800252a:	4598      	cmp	r8, r3
 800252c:	d808      	bhi.n	8002540 <__ieee754_powf+0x134>
 800252e:	2c00      	cmp	r4, #0
 8002530:	da0b      	bge.n	800254a <__ieee754_powf+0x13e>
 8002532:	2000      	movs	r0, #0
 8002534:	ecbd 8b02 	vpop	{d8}
 8002538:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800253c:	f000 bbf2 	b.w	8002d24 <__math_oflowf>
 8002540:	4ba5      	ldr	r3, [pc, #660]	@ (80027d8 <__ieee754_powf+0x3cc>)
 8002542:	4598      	cmp	r8, r3
 8002544:	d908      	bls.n	8002558 <__ieee754_powf+0x14c>
 8002546:	2c00      	cmp	r4, #0
 8002548:	dcf3      	bgt.n	8002532 <__ieee754_powf+0x126>
 800254a:	2000      	movs	r0, #0
 800254c:	ecbd 8b02 	vpop	{d8}
 8002550:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002554:	f000 bbe0 	b.w	8002d18 <__math_uflowf>
 8002558:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800255c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002560:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80027dc <__ieee754_powf+0x3d0>
 8002564:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8002568:	eee0 6a67 	vfms.f32	s13, s0, s15
 800256c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002570:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002574:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002578:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80027e0 <__ieee754_powf+0x3d4>
 800257c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002580:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80027e4 <__ieee754_powf+0x3d8>
 8002584:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8002588:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80027e8 <__ieee754_powf+0x3dc>
 800258c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002590:	eeb0 7a67 	vmov.f32	s14, s15
 8002594:	eea0 7a26 	vfma.f32	s14, s0, s13
 8002598:	ee17 3a10 	vmov	r3, s14
 800259c:	f36f 030b 	bfc	r3, #0, #12
 80025a0:	ee07 3a10 	vmov	s14, r3
 80025a4:	eeb0 6a47 	vmov.f32	s12, s14
 80025a8:	eea0 6a66 	vfms.f32	s12, s0, s13
 80025ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80025b0:	3d01      	subs	r5, #1
 80025b2:	4305      	orrs	r5, r0
 80025b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025b8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80025bc:	f36f 040b 	bfc	r4, #0, #12
 80025c0:	bf18      	it	ne
 80025c2:	eeb0 8a66 	vmovne.f32	s16, s13
 80025c6:	ee06 4a90 	vmov	s13, r4
 80025ca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80025ce:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80025d2:	ee67 7a26 	vmul.f32	s15, s14, s13
 80025d6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80025da:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80025de:	ee17 1a10 	vmov	r1, s14
 80025e2:	2900      	cmp	r1, #0
 80025e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80025e8:	f340 80dd 	ble.w	80027a6 <__ieee754_powf+0x39a>
 80025ec:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80025f0:	f240 80ca 	bls.w	8002788 <__ieee754_powf+0x37c>
 80025f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	bf4c      	ite	mi
 80025fe:	2001      	movmi	r0, #1
 8002600:	2000      	movpl	r0, #0
 8002602:	e797      	b.n	8002534 <__ieee754_powf+0x128>
 8002604:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8002608:	bf01      	itttt	eq
 800260a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80027ec <__ieee754_powf+0x3e0>
 800260e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8002612:	f06f 0317 	mvneq.w	r3, #23
 8002616:	ee17 7a90 	vmoveq	r7, s15
 800261a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800261e:	bf18      	it	ne
 8002620:	2300      	movne	r3, #0
 8002622:	3a7f      	subs	r2, #127	@ 0x7f
 8002624:	441a      	add	r2, r3
 8002626:	4b72      	ldr	r3, [pc, #456]	@ (80027f0 <__ieee754_powf+0x3e4>)
 8002628:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800262c:	429f      	cmp	r7, r3
 800262e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8002632:	dd06      	ble.n	8002642 <__ieee754_powf+0x236>
 8002634:	4b6f      	ldr	r3, [pc, #444]	@ (80027f4 <__ieee754_powf+0x3e8>)
 8002636:	429f      	cmp	r7, r3
 8002638:	f340 80a4 	ble.w	8002784 <__ieee754_powf+0x378>
 800263c:	3201      	adds	r2, #1
 800263e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8002642:	2600      	movs	r6, #0
 8002644:	4b6c      	ldr	r3, [pc, #432]	@ (80027f8 <__ieee754_powf+0x3ec>)
 8002646:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800264a:	ee07 1a10 	vmov	s14, r1
 800264e:	edd3 5a00 	vldr	s11, [r3]
 8002652:	4b6a      	ldr	r3, [pc, #424]	@ (80027fc <__ieee754_powf+0x3f0>)
 8002654:	ee75 7a87 	vadd.f32	s15, s11, s14
 8002658:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800265c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8002660:	1049      	asrs	r1, r1, #1
 8002662:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8002666:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800266a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800266e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8002672:	ee07 1a90 	vmov	s15, r1
 8002676:	ee26 5a24 	vmul.f32	s10, s12, s9
 800267a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800267e:	ee15 7a10 	vmov	r7, s10
 8002682:	401f      	ands	r7, r3
 8002684:	ee06 7a90 	vmov	s13, r7
 8002688:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800268c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002690:	ee65 7a05 	vmul.f32	s15, s10, s10
 8002694:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8002698:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8002800 <__ieee754_powf+0x3f4>
 800269c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002804 <__ieee754_powf+0x3f8>
 80026a0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80026a4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002808 <__ieee754_powf+0x3fc>
 80026a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80026ac:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80027dc <__ieee754_powf+0x3d0>
 80026b0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80026b4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800280c <__ieee754_powf+0x400>
 80026b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80026bc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8002810 <__ieee754_powf+0x404>
 80026c0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80026c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80026c8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80026cc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80026d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80026d4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80026d8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80026dc:	eef0 5a67 	vmov.f32	s11, s15
 80026e0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80026e4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80026e8:	ee15 1a90 	vmov	r1, s11
 80026ec:	4019      	ands	r1, r3
 80026ee:	ee05 1a90 	vmov	s11, r1
 80026f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80026f6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80026fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002702:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002706:	eeb0 6a67 	vmov.f32	s12, s15
 800270a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800270e:	ee16 1a10 	vmov	r1, s12
 8002712:	4019      	ands	r1, r3
 8002714:	ee06 1a10 	vmov	s12, r1
 8002718:	eeb0 7a46 	vmov.f32	s14, s12
 800271c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8002720:	493c      	ldr	r1, [pc, #240]	@ (8002814 <__ieee754_powf+0x408>)
 8002722:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8002726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800272a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002818 <__ieee754_powf+0x40c>
 800272e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800281c <__ieee754_powf+0x410>
 8002732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002736:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002820 <__ieee754_powf+0x414>
 800273a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800273e:	ed91 7a00 	vldr	s14, [r1]
 8002742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002746:	ee07 2a10 	vmov	s14, r2
 800274a:	4a36      	ldr	r2, [pc, #216]	@ (8002824 <__ieee754_powf+0x418>)
 800274c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002750:	eeb0 7a67 	vmov.f32	s14, s15
 8002754:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002758:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800275c:	ed92 5a00 	vldr	s10, [r2]
 8002760:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002764:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002768:	ee17 2a10 	vmov	r2, s14
 800276c:	401a      	ands	r2, r3
 800276e:	ee07 2a10 	vmov	s14, r2
 8002772:	ee77 6a66 	vsub.f32	s13, s14, s13
 8002776:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800277a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800277e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002782:	e715      	b.n	80025b0 <__ieee754_powf+0x1a4>
 8002784:	2601      	movs	r6, #1
 8002786:	e75d      	b.n	8002644 <__ieee754_powf+0x238>
 8002788:	d152      	bne.n	8002830 <__ieee754_powf+0x424>
 800278a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002828 <__ieee754_powf+0x41c>
 800278e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002792:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8002796:	eef4 6ac7 	vcmpe.f32	s13, s14
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	f73f af29 	bgt.w	80025f4 <__ieee754_powf+0x1e8>
 80027a2:	2386      	movs	r3, #134	@ 0x86
 80027a4:	e048      	b.n	8002838 <__ieee754_powf+0x42c>
 80027a6:	4a21      	ldr	r2, [pc, #132]	@ (800282c <__ieee754_powf+0x420>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d907      	bls.n	80027bc <__ieee754_powf+0x3b0>
 80027ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	bf4c      	ite	mi
 80027b6:	2001      	movmi	r0, #1
 80027b8:	2000      	movpl	r0, #0
 80027ba:	e6c7      	b.n	800254c <__ieee754_powf+0x140>
 80027bc:	d138      	bne.n	8002830 <__ieee754_powf+0x424>
 80027be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80027c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ca:	dbea      	blt.n	80027a2 <__ieee754_powf+0x396>
 80027cc:	e7ee      	b.n	80027ac <__ieee754_powf+0x3a0>
 80027ce:	bf00      	nop
 80027d0:	00000000 	.word	0x00000000
 80027d4:	3f7ffff3 	.word	0x3f7ffff3
 80027d8:	3f800007 	.word	0x3f800007
 80027dc:	3eaaaaab 	.word	0x3eaaaaab
 80027e0:	3fb8aa00 	.word	0x3fb8aa00
 80027e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80027e8:	36eca570 	.word	0x36eca570
 80027ec:	4b800000 	.word	0x4b800000
 80027f0:	001cc471 	.word	0x001cc471
 80027f4:	005db3d6 	.word	0x005db3d6
 80027f8:	080032d0 	.word	0x080032d0
 80027fc:	fffff000 	.word	0xfffff000
 8002800:	3e6c3255 	.word	0x3e6c3255
 8002804:	3e53f142 	.word	0x3e53f142
 8002808:	3e8ba305 	.word	0x3e8ba305
 800280c:	3edb6db7 	.word	0x3edb6db7
 8002810:	3f19999a 	.word	0x3f19999a
 8002814:	080032c0 	.word	0x080032c0
 8002818:	3f76384f 	.word	0x3f76384f
 800281c:	3f763800 	.word	0x3f763800
 8002820:	369dc3a0 	.word	0x369dc3a0
 8002824:	080032c8 	.word	0x080032c8
 8002828:	3338aa3c 	.word	0x3338aa3c
 800282c:	43160000 	.word	0x43160000
 8002830:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8002834:	d96f      	bls.n	8002916 <__ieee754_powf+0x50a>
 8002836:	15db      	asrs	r3, r3, #23
 8002838:	3b7e      	subs	r3, #126	@ 0x7e
 800283a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800283e:	4118      	asrs	r0, r3
 8002840:	4408      	add	r0, r1
 8002842:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002846:	4a4e      	ldr	r2, [pc, #312]	@ (8002980 <__ieee754_powf+0x574>)
 8002848:	3b7f      	subs	r3, #127	@ 0x7f
 800284a:	411a      	asrs	r2, r3
 800284c:	4002      	ands	r2, r0
 800284e:	ee07 2a10 	vmov	s14, r2
 8002852:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8002856:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800285a:	f1c3 0317 	rsb	r3, r3, #23
 800285e:	4118      	asrs	r0, r3
 8002860:	2900      	cmp	r1, #0
 8002862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002866:	bfb8      	it	lt
 8002868:	4240      	neglt	r0, r0
 800286a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800286e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002984 <__ieee754_powf+0x578>
 8002872:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8002988 <__ieee754_powf+0x57c>
 8002876:	ee16 3a90 	vmov	r3, s13
 800287a:	f36f 030b 	bfc	r3, #0, #12
 800287e:	ee06 3a90 	vmov	s13, r3
 8002882:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002886:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800288a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800288e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800298c <__ieee754_powf+0x580>
 8002892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002896:	eee0 7a87 	vfma.f32	s15, s1, s14
 800289a:	eeb0 7a67 	vmov.f32	s14, s15
 800289e:	eea6 7a86 	vfma.f32	s14, s13, s12
 80028a2:	eef0 5a47 	vmov.f32	s11, s14
 80028a6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80028aa:	ee67 6a07 	vmul.f32	s13, s14, s14
 80028ae:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80028b2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8002990 <__ieee754_powf+0x584>
 80028b6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8002994 <__ieee754_powf+0x588>
 80028ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80028be:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002998 <__ieee754_powf+0x58c>
 80028c2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80028c6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800299c <__ieee754_powf+0x590>
 80028ca:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80028ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80029a0 <__ieee754_powf+0x594>
 80028d2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80028d6:	eeb0 6a47 	vmov.f32	s12, s14
 80028da:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80028de:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80028e2:	ee67 5a06 	vmul.f32	s11, s14, s12
 80028e6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80028ea:	eee7 7a27 	vfma.f32	s15, s14, s15
 80028ee:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80028f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80028fe:	ee10 3a10 	vmov	r3, s0
 8002902:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8002906:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800290a:	da06      	bge.n	800291a <__ieee754_powf+0x50e>
 800290c:	f000 f984 	bl	8002c18 <scalbnf>
 8002910:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002914:	e592      	b.n	800243c <__ieee754_powf+0x30>
 8002916:	2000      	movs	r0, #0
 8002918:	e7a7      	b.n	800286a <__ieee754_powf+0x45e>
 800291a:	ee00 3a10 	vmov	s0, r3
 800291e:	e7f7      	b.n	8002910 <__ieee754_powf+0x504>
 8002920:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002924:	e58a      	b.n	800243c <__ieee754_powf+0x30>
 8002926:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80029a4 <__ieee754_powf+0x598>
 800292a:	e587      	b.n	800243c <__ieee754_powf+0x30>
 800292c:	eeb0 0a48 	vmov.f32	s0, s16
 8002930:	e584      	b.n	800243c <__ieee754_powf+0x30>
 8002932:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8002936:	f43f adbb 	beq.w	80024b0 <__ieee754_powf+0xa4>
 800293a:	2502      	movs	r5, #2
 800293c:	eeb0 0a48 	vmov.f32	s0, s16
 8002940:	f000 f962 	bl	8002c08 <fabsf>
 8002944:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8002948:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800294c:	4647      	mov	r7, r8
 800294e:	d003      	beq.n	8002958 <__ieee754_powf+0x54c>
 8002950:	f1b8 0f00 	cmp.w	r8, #0
 8002954:	f47f addb 	bne.w	800250e <__ieee754_powf+0x102>
 8002958:	2c00      	cmp	r4, #0
 800295a:	bfbc      	itt	lt
 800295c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8002960:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002964:	2e00      	cmp	r6, #0
 8002966:	f6bf ad69 	bge.w	800243c <__ieee754_powf+0x30>
 800296a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800296e:	ea58 0805 	orrs.w	r8, r8, r5
 8002972:	f47f adc7 	bne.w	8002504 <__ieee754_powf+0xf8>
 8002976:	ee70 7a40 	vsub.f32	s15, s0, s0
 800297a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800297e:	e55d      	b.n	800243c <__ieee754_powf+0x30>
 8002980:	ff800000 	.word	0xff800000
 8002984:	3f317218 	.word	0x3f317218
 8002988:	3f317200 	.word	0x3f317200
 800298c:	35bfbe8c 	.word	0x35bfbe8c
 8002990:	b5ddea0e 	.word	0xb5ddea0e
 8002994:	3331bb4c 	.word	0x3331bb4c
 8002998:	388ab355 	.word	0x388ab355
 800299c:	bb360b61 	.word	0xbb360b61
 80029a0:	3e2aaaab 	.word	0x3e2aaaab
 80029a4:	00000000 	.word	0x00000000

080029a8 <__ieee754_rem_pio2f>:
 80029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029aa:	ee10 6a10 	vmov	r6, s0
 80029ae:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <__ieee754_rem_pio2f+0x228>)
 80029b0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80029b4:	429d      	cmp	r5, r3
 80029b6:	b087      	sub	sp, #28
 80029b8:	4604      	mov	r4, r0
 80029ba:	d805      	bhi.n	80029c8 <__ieee754_rem_pio2f+0x20>
 80029bc:	2300      	movs	r3, #0
 80029be:	ed80 0a00 	vstr	s0, [r0]
 80029c2:	6043      	str	r3, [r0, #4]
 80029c4:	2000      	movs	r0, #0
 80029c6:	e022      	b.n	8002a0e <__ieee754_rem_pio2f+0x66>
 80029c8:	4b82      	ldr	r3, [pc, #520]	@ (8002bd4 <__ieee754_rem_pio2f+0x22c>)
 80029ca:	429d      	cmp	r5, r3
 80029cc:	d83a      	bhi.n	8002a44 <__ieee754_rem_pio2f+0x9c>
 80029ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80029d2:	2e00      	cmp	r6, #0
 80029d4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002bd8 <__ieee754_rem_pio2f+0x230>
 80029d8:	4a80      	ldr	r2, [pc, #512]	@ (8002bdc <__ieee754_rem_pio2f+0x234>)
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	dd18      	ble.n	8002a12 <__ieee754_rem_pio2f+0x6a>
 80029e0:	4293      	cmp	r3, r2
 80029e2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80029e6:	bf09      	itett	eq
 80029e8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8002be0 <__ieee754_rem_pio2f+0x238>
 80029ec:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8002be4 <__ieee754_rem_pio2f+0x23c>
 80029f0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8002be8 <__ieee754_rem_pio2f+0x240>
 80029f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80029f8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80029fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a00:	ed80 7a00 	vstr	s14, [r0]
 8002a04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a08:	edc0 7a01 	vstr	s15, [r0, #4]
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	b007      	add	sp, #28
 8002a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a12:	4293      	cmp	r3, r2
 8002a14:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002a18:	bf09      	itett	eq
 8002a1a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8002be0 <__ieee754_rem_pio2f+0x238>
 8002a1e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8002be4 <__ieee754_rem_pio2f+0x23c>
 8002a22:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8002be8 <__ieee754_rem_pio2f+0x240>
 8002a26:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002a2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002a2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a32:	ed80 7a00 	vstr	s14, [r0]
 8002a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a3a:	edc0 7a01 	vstr	s15, [r0, #4]
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a42:	e7e4      	b.n	8002a0e <__ieee754_rem_pio2f+0x66>
 8002a44:	4b69      	ldr	r3, [pc, #420]	@ (8002bec <__ieee754_rem_pio2f+0x244>)
 8002a46:	429d      	cmp	r5, r3
 8002a48:	d873      	bhi.n	8002b32 <__ieee754_rem_pio2f+0x18a>
 8002a4a:	f000 f8dd 	bl	8002c08 <fabsf>
 8002a4e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8002bf0 <__ieee754_rem_pio2f+0x248>
 8002a52:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002a56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a62:	ee17 0a90 	vmov	r0, s15
 8002a66:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8002bd8 <__ieee754_rem_pio2f+0x230>
 8002a6a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8002a6e:	281f      	cmp	r0, #31
 8002a70:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8002be4 <__ieee754_rem_pio2f+0x23c>
 8002a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a78:	eeb1 6a47 	vneg.f32	s12, s14
 8002a7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002a80:	ee16 1a90 	vmov	r1, s13
 8002a84:	dc09      	bgt.n	8002a9a <__ieee754_rem_pio2f+0xf2>
 8002a86:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf4 <__ieee754_rem_pio2f+0x24c>)
 8002a88:	1e47      	subs	r7, r0, #1
 8002a8a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8002a8e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8002a92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d107      	bne.n	8002aaa <__ieee754_rem_pio2f+0x102>
 8002a9a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8002a9e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8002aa2:	2a08      	cmp	r2, #8
 8002aa4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8002aa8:	dc14      	bgt.n	8002ad4 <__ieee754_rem_pio2f+0x12c>
 8002aaa:	6021      	str	r1, [r4, #0]
 8002aac:	ed94 7a00 	vldr	s14, [r4]
 8002ab0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002ab4:	2e00      	cmp	r6, #0
 8002ab6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002aba:	ed84 0a01 	vstr	s0, [r4, #4]
 8002abe:	daa6      	bge.n	8002a0e <__ieee754_rem_pio2f+0x66>
 8002ac0:	eeb1 7a47 	vneg.f32	s14, s14
 8002ac4:	eeb1 0a40 	vneg.f32	s0, s0
 8002ac8:	ed84 7a00 	vstr	s14, [r4]
 8002acc:	ed84 0a01 	vstr	s0, [r4, #4]
 8002ad0:	4240      	negs	r0, r0
 8002ad2:	e79c      	b.n	8002a0e <__ieee754_rem_pio2f+0x66>
 8002ad4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8002be0 <__ieee754_rem_pio2f+0x238>
 8002ad8:	eef0 6a40 	vmov.f32	s13, s0
 8002adc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8002ae0:	ee70 7a66 	vsub.f32	s15, s0, s13
 8002ae4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002ae8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002be8 <__ieee754_rem_pio2f+0x240>
 8002aec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8002af0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8002af4:	ee15 2a90 	vmov	r2, s11
 8002af8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8002afc:	1a5b      	subs	r3, r3, r1
 8002afe:	2b19      	cmp	r3, #25
 8002b00:	dc04      	bgt.n	8002b0c <__ieee754_rem_pio2f+0x164>
 8002b02:	edc4 5a00 	vstr	s11, [r4]
 8002b06:	eeb0 0a66 	vmov.f32	s0, s13
 8002b0a:	e7cf      	b.n	8002aac <__ieee754_rem_pio2f+0x104>
 8002b0c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8002bf8 <__ieee754_rem_pio2f+0x250>
 8002b10:	eeb0 0a66 	vmov.f32	s0, s13
 8002b14:	eea6 0a25 	vfma.f32	s0, s12, s11
 8002b18:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8002b1c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002bfc <__ieee754_rem_pio2f+0x254>
 8002b20:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002b24:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8002b28:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002b2c:	ed84 7a00 	vstr	s14, [r4]
 8002b30:	e7bc      	b.n	8002aac <__ieee754_rem_pio2f+0x104>
 8002b32:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8002b36:	d306      	bcc.n	8002b46 <__ieee754_rem_pio2f+0x19e>
 8002b38:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002b3c:	edc0 7a01 	vstr	s15, [r0, #4]
 8002b40:	edc0 7a00 	vstr	s15, [r0]
 8002b44:	e73e      	b.n	80029c4 <__ieee754_rem_pio2f+0x1c>
 8002b46:	15ea      	asrs	r2, r5, #23
 8002b48:	3a86      	subs	r2, #134	@ 0x86
 8002b4a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002b56:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002c00 <__ieee754_rem_pio2f+0x258>
 8002b5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b62:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002b66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002b6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b76:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002b7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	edcd 7a05 	vstr	s15, [sp, #20]
 8002b8a:	d11e      	bne.n	8002bca <__ieee754_rem_pio2f+0x222>
 8002b8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2302      	movne	r3, #2
 8002b9a:	491a      	ldr	r1, [pc, #104]	@ (8002c04 <__ieee754_rem_pio2f+0x25c>)
 8002b9c:	9101      	str	r1, [sp, #4]
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	9100      	str	r1, [sp, #0]
 8002ba2:	a803      	add	r0, sp, #12
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	f000 f8c7 	bl	8002d38 <__kernel_rem_pio2f>
 8002baa:	2e00      	cmp	r6, #0
 8002bac:	f6bf af2f 	bge.w	8002a0e <__ieee754_rem_pio2f+0x66>
 8002bb0:	edd4 7a00 	vldr	s15, [r4]
 8002bb4:	eef1 7a67 	vneg.f32	s15, s15
 8002bb8:	edc4 7a00 	vstr	s15, [r4]
 8002bbc:	edd4 7a01 	vldr	s15, [r4, #4]
 8002bc0:	eef1 7a67 	vneg.f32	s15, s15
 8002bc4:	edc4 7a01 	vstr	s15, [r4, #4]
 8002bc8:	e782      	b.n	8002ad0 <__ieee754_rem_pio2f+0x128>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e7e5      	b.n	8002b9a <__ieee754_rem_pio2f+0x1f2>
 8002bce:	bf00      	nop
 8002bd0:	3f490fd8 	.word	0x3f490fd8
 8002bd4:	4016cbe3 	.word	0x4016cbe3
 8002bd8:	3fc90f80 	.word	0x3fc90f80
 8002bdc:	3fc90fd0 	.word	0x3fc90fd0
 8002be0:	37354400 	.word	0x37354400
 8002be4:	37354443 	.word	0x37354443
 8002be8:	2e85a308 	.word	0x2e85a308
 8002bec:	43490f80 	.word	0x43490f80
 8002bf0:	3f22f984 	.word	0x3f22f984
 8002bf4:	080032d8 	.word	0x080032d8
 8002bf8:	2e85a300 	.word	0x2e85a300
 8002bfc:	248d3132 	.word	0x248d3132
 8002c00:	43800000 	.word	0x43800000
 8002c04:	08003358 	.word	0x08003358

08002c08 <fabsf>:
 8002c08:	ee10 3a10 	vmov	r3, s0
 8002c0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c10:	ee00 3a10 	vmov	s0, r3
 8002c14:	4770      	bx	lr
	...

08002c18 <scalbnf>:
 8002c18:	ee10 3a10 	vmov	r3, s0
 8002c1c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8002c20:	d02b      	beq.n	8002c7a <scalbnf+0x62>
 8002c22:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8002c26:	d302      	bcc.n	8002c2e <scalbnf+0x16>
 8002c28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002c2c:	4770      	bx	lr
 8002c2e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8002c32:	d123      	bne.n	8002c7c <scalbnf+0x64>
 8002c34:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <scalbnf+0xb0>)
 8002c36:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002ccc <scalbnf+0xb4>
 8002c3a:	4298      	cmp	r0, r3
 8002c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002c40:	db17      	blt.n	8002c72 <scalbnf+0x5a>
 8002c42:	ee10 3a10 	vmov	r3, s0
 8002c46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002c4a:	3a19      	subs	r2, #25
 8002c4c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002c50:	4288      	cmp	r0, r1
 8002c52:	dd15      	ble.n	8002c80 <scalbnf+0x68>
 8002c54:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002cd0 <scalbnf+0xb8>
 8002c58:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002cd4 <scalbnf+0xbc>
 8002c5c:	ee10 3a10 	vmov	r3, s0
 8002c60:	eeb0 7a67 	vmov.f32	s14, s15
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bfb8      	it	lt
 8002c68:	eef0 7a66 	vmovlt.f32	s15, s13
 8002c6c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002c70:	4770      	bx	lr
 8002c72:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002cd8 <scalbnf+0xc0>
 8002c76:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c7a:	4770      	bx	lr
 8002c7c:	0dd2      	lsrs	r2, r2, #23
 8002c7e:	e7e5      	b.n	8002c4c <scalbnf+0x34>
 8002c80:	4410      	add	r0, r2
 8002c82:	28fe      	cmp	r0, #254	@ 0xfe
 8002c84:	dce6      	bgt.n	8002c54 <scalbnf+0x3c>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	dd06      	ble.n	8002c98 <scalbnf+0x80>
 8002c8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002c8e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002c92:	ee00 3a10 	vmov	s0, r3
 8002c96:	4770      	bx	lr
 8002c98:	f110 0f16 	cmn.w	r0, #22
 8002c9c:	da09      	bge.n	8002cb2 <scalbnf+0x9a>
 8002c9e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002cd8 <scalbnf+0xc0>
 8002ca2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002cdc <scalbnf+0xc4>
 8002ca6:	ee10 3a10 	vmov	r3, s0
 8002caa:	eeb0 7a67 	vmov.f32	s14, s15
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	e7d9      	b.n	8002c66 <scalbnf+0x4e>
 8002cb2:	3019      	adds	r0, #25
 8002cb4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002cb8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002cbc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002ce0 <scalbnf+0xc8>
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	e7d7      	b.n	8002c76 <scalbnf+0x5e>
 8002cc6:	bf00      	nop
 8002cc8:	ffff3cb0 	.word	0xffff3cb0
 8002ccc:	4c000000 	.word	0x4c000000
 8002cd0:	7149f2ca 	.word	0x7149f2ca
 8002cd4:	f149f2ca 	.word	0xf149f2ca
 8002cd8:	0da24260 	.word	0x0da24260
 8002cdc:	8da24260 	.word	0x8da24260
 8002ce0:	33000000 	.word	0x33000000

08002ce4 <with_errnof>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	ed2d 8b02 	vpush	{d8}
 8002cea:	eeb0 8a40 	vmov.f32	s16, s0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	f7ff fa1a 	bl	8002128 <__errno>
 8002cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8002cf8:	ecbd 8b02 	vpop	{d8}
 8002cfc:	6004      	str	r4, [r0, #0]
 8002cfe:	bd10      	pop	{r4, pc}

08002d00 <xflowf>:
 8002d00:	b130      	cbz	r0, 8002d10 <xflowf+0x10>
 8002d02:	eef1 7a40 	vneg.f32	s15, s0
 8002d06:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002d0a:	2022      	movs	r0, #34	@ 0x22
 8002d0c:	f7ff bfea 	b.w	8002ce4 <with_errnof>
 8002d10:	eef0 7a40 	vmov.f32	s15, s0
 8002d14:	e7f7      	b.n	8002d06 <xflowf+0x6>
	...

08002d18 <__math_uflowf>:
 8002d18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002d20 <__math_uflowf+0x8>
 8002d1c:	f7ff bff0 	b.w	8002d00 <xflowf>
 8002d20:	10000000 	.word	0x10000000

08002d24 <__math_oflowf>:
 8002d24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002d2c <__math_oflowf+0x8>
 8002d28:	f7ff bfea 	b.w	8002d00 <xflowf>
 8002d2c:	70000000 	.word	0x70000000

08002d30 <__ieee754_sqrtf>:
 8002d30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002d34:	4770      	bx	lr
	...

08002d38 <__kernel_rem_pio2f>:
 8002d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d3c:	ed2d 8b04 	vpush	{d8-d9}
 8002d40:	b0d9      	sub	sp, #356	@ 0x164
 8002d42:	4690      	mov	r8, r2
 8002d44:	9001      	str	r0, [sp, #4]
 8002d46:	4ab6      	ldr	r2, [pc, #728]	@ (8003020 <__kernel_rem_pio2f+0x2e8>)
 8002d48:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8002d4a:	f118 0f04 	cmn.w	r8, #4
 8002d4e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8002d52:	460f      	mov	r7, r1
 8002d54:	f103 3bff 	add.w	fp, r3, #4294967295
 8002d58:	db26      	blt.n	8002da8 <__kernel_rem_pio2f+0x70>
 8002d5a:	f1b8 0203 	subs.w	r2, r8, #3
 8002d5e:	bf48      	it	mi
 8002d60:	f108 0204 	addmi.w	r2, r8, #4
 8002d64:	10d2      	asrs	r2, r2, #3
 8002d66:	1c55      	adds	r5, r2, #1
 8002d68:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8002d6a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8003030 <__kernel_rem_pio2f+0x2f8>
 8002d6e:	00e8      	lsls	r0, r5, #3
 8002d70:	eba2 060b 	sub.w	r6, r2, fp
 8002d74:	9002      	str	r0, [sp, #8]
 8002d76:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8002d7a:	eb0a 0c0b 	add.w	ip, sl, fp
 8002d7e:	ac1c      	add	r4, sp, #112	@ 0x70
 8002d80:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8002d84:	2000      	movs	r0, #0
 8002d86:	4560      	cmp	r0, ip
 8002d88:	dd10      	ble.n	8002dac <__kernel_rem_pio2f+0x74>
 8002d8a:	a91c      	add	r1, sp, #112	@ 0x70
 8002d8c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002d90:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8002d94:	2600      	movs	r6, #0
 8002d96:	4556      	cmp	r6, sl
 8002d98:	dc24      	bgt.n	8002de4 <__kernel_rem_pio2f+0xac>
 8002d9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002d9e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8003030 <__kernel_rem_pio2f+0x2f8>
 8002da2:	4684      	mov	ip, r0
 8002da4:	2400      	movs	r4, #0
 8002da6:	e016      	b.n	8002dd6 <__kernel_rem_pio2f+0x9e>
 8002da8:	2200      	movs	r2, #0
 8002daa:	e7dc      	b.n	8002d66 <__kernel_rem_pio2f+0x2e>
 8002dac:	42c6      	cmn	r6, r0
 8002dae:	bf5d      	ittte	pl
 8002db0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8002db4:	ee07 1a90 	vmovpl	s15, r1
 8002db8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8002dbc:	eef0 7a47 	vmovmi.f32	s15, s14
 8002dc0:	ece4 7a01 	vstmia	r4!, {s15}
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	e7de      	b.n	8002d86 <__kernel_rem_pio2f+0x4e>
 8002dc8:	ecfe 6a01 	vldmia	lr!, {s13}
 8002dcc:	ed3c 7a01 	vldmdb	ip!, {s14}
 8002dd0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002dd4:	3401      	adds	r4, #1
 8002dd6:	455c      	cmp	r4, fp
 8002dd8:	ddf6      	ble.n	8002dc8 <__kernel_rem_pio2f+0x90>
 8002dda:	ece9 7a01 	vstmia	r9!, {s15}
 8002dde:	3601      	adds	r6, #1
 8002de0:	3004      	adds	r0, #4
 8002de2:	e7d8      	b.n	8002d96 <__kernel_rem_pio2f+0x5e>
 8002de4:	a908      	add	r1, sp, #32
 8002de6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8002dea:	9104      	str	r1, [sp, #16]
 8002dec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8002dee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800302c <__kernel_rem_pio2f+0x2f4>
 8002df2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8003028 <__kernel_rem_pio2f+0x2f0>
 8002df6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8002dfa:	9203      	str	r2, [sp, #12]
 8002dfc:	4654      	mov	r4, sl
 8002dfe:	00a2      	lsls	r2, r4, #2
 8002e00:	9205      	str	r2, [sp, #20]
 8002e02:	aa58      	add	r2, sp, #352	@ 0x160
 8002e04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8002e08:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8002e0c:	a944      	add	r1, sp, #272	@ 0x110
 8002e0e:	aa08      	add	r2, sp, #32
 8002e10:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8002e14:	4694      	mov	ip, r2
 8002e16:	4626      	mov	r6, r4
 8002e18:	2e00      	cmp	r6, #0
 8002e1a:	dc4c      	bgt.n	8002eb6 <__kernel_rem_pio2f+0x17e>
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002e22:	f7ff fef9 	bl	8002c18 <scalbnf>
 8002e26:	eeb0 8a40 	vmov.f32	s16, s0
 8002e2a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8002e2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002e32:	f000 f9e9 	bl	8003208 <floorf>
 8002e36:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8002e3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002e44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002e48:	ee17 9a90 	vmov	r9, s15
 8002e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e50:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002e54:	dd41      	ble.n	8002eda <__kernel_rem_pio2f+0x1a2>
 8002e56:	f104 3cff 	add.w	ip, r4, #4294967295
 8002e5a:	a908      	add	r1, sp, #32
 8002e5c:	f1c5 0e08 	rsb	lr, r5, #8
 8002e60:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8002e64:	fa46 f00e 	asr.w	r0, r6, lr
 8002e68:	4481      	add	r9, r0
 8002e6a:	fa00 f00e 	lsl.w	r0, r0, lr
 8002e6e:	1a36      	subs	r6, r6, r0
 8002e70:	f1c5 0007 	rsb	r0, r5, #7
 8002e74:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8002e78:	4106      	asrs	r6, r0
 8002e7a:	2e00      	cmp	r6, #0
 8002e7c:	dd3c      	ble.n	8002ef8 <__kernel_rem_pio2f+0x1c0>
 8002e7e:	f04f 0e00 	mov.w	lr, #0
 8002e82:	f109 0901 	add.w	r9, r9, #1
 8002e86:	4670      	mov	r0, lr
 8002e88:	4574      	cmp	r4, lr
 8002e8a:	dc68      	bgt.n	8002f5e <__kernel_rem_pio2f+0x226>
 8002e8c:	2d00      	cmp	r5, #0
 8002e8e:	dd03      	ble.n	8002e98 <__kernel_rem_pio2f+0x160>
 8002e90:	2d01      	cmp	r5, #1
 8002e92:	d074      	beq.n	8002f7e <__kernel_rem_pio2f+0x246>
 8002e94:	2d02      	cmp	r5, #2
 8002e96:	d07d      	beq.n	8002f94 <__kernel_rem_pio2f+0x25c>
 8002e98:	2e02      	cmp	r6, #2
 8002e9a:	d12d      	bne.n	8002ef8 <__kernel_rem_pio2f+0x1c0>
 8002e9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ea0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002ea4:	b340      	cbz	r0, 8002ef8 <__kernel_rem_pio2f+0x1c0>
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	9306      	str	r3, [sp, #24]
 8002eaa:	f7ff feb5 	bl	8002c18 <scalbnf>
 8002eae:	9b06      	ldr	r3, [sp, #24]
 8002eb0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002eb4:	e020      	b.n	8002ef8 <__kernel_rem_pio2f+0x1c0>
 8002eb6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8002eba:	3e01      	subs	r6, #1
 8002ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002ec8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002ecc:	ecac 0a01 	vstmia	ip!, {s0}
 8002ed0:	ed30 0a01 	vldmdb	r0!, {s0}
 8002ed4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002ed8:	e79e      	b.n	8002e18 <__kernel_rem_pio2f+0xe0>
 8002eda:	d105      	bne.n	8002ee8 <__kernel_rem_pio2f+0x1b0>
 8002edc:	1e60      	subs	r0, r4, #1
 8002ede:	a908      	add	r1, sp, #32
 8002ee0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8002ee4:	11f6      	asrs	r6, r6, #7
 8002ee6:	e7c8      	b.n	8002e7a <__kernel_rem_pio2f+0x142>
 8002ee8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002eec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	da31      	bge.n	8002f5a <__kernel_rem_pio2f+0x222>
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f00:	f040 8098 	bne.w	8003034 <__kernel_rem_pio2f+0x2fc>
 8002f04:	1e60      	subs	r0, r4, #1
 8002f06:	2200      	movs	r2, #0
 8002f08:	4550      	cmp	r0, sl
 8002f0a:	da4b      	bge.n	8002fa4 <__kernel_rem_pio2f+0x26c>
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d065      	beq.n	8002fdc <__kernel_rem_pio2f+0x2a4>
 8002f10:	3c01      	subs	r4, #1
 8002f12:	ab08      	add	r3, sp, #32
 8002f14:	3d08      	subs	r5, #8
 8002f16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f8      	beq.n	8002f10 <__kernel_rem_pio2f+0x1d8>
 8002f1e:	4628      	mov	r0, r5
 8002f20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002f24:	f7ff fe78 	bl	8002c18 <scalbnf>
 8002f28:	1c63      	adds	r3, r4, #1
 8002f2a:	aa44      	add	r2, sp, #272	@ 0x110
 8002f2c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800302c <__kernel_rem_pio2f+0x2f4>
 8002f30:	0099      	lsls	r1, r3, #2
 8002f32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002f36:	4623      	mov	r3, r4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f280 80a9 	bge.w	8003090 <__kernel_rem_pio2f+0x358>
 8002f3e:	4623      	mov	r3, r4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f2c0 80c7 	blt.w	80030d4 <__kernel_rem_pio2f+0x39c>
 8002f46:	aa44      	add	r2, sp, #272	@ 0x110
 8002f48:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8002f4c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8003024 <__kernel_rem_pio2f+0x2ec>
 8002f50:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8003030 <__kernel_rem_pio2f+0x2f8>
 8002f54:	2000      	movs	r0, #0
 8002f56:	1ae2      	subs	r2, r4, r3
 8002f58:	e0b1      	b.n	80030be <__kernel_rem_pio2f+0x386>
 8002f5a:	2602      	movs	r6, #2
 8002f5c:	e78f      	b.n	8002e7e <__kernel_rem_pio2f+0x146>
 8002f5e:	f852 1b04 	ldr.w	r1, [r2], #4
 8002f62:	b948      	cbnz	r0, 8002f78 <__kernel_rem_pio2f+0x240>
 8002f64:	b121      	cbz	r1, 8002f70 <__kernel_rem_pio2f+0x238>
 8002f66:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8002f6a:	f842 1c04 	str.w	r1, [r2, #-4]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	f10e 0e01 	add.w	lr, lr, #1
 8002f74:	4608      	mov	r0, r1
 8002f76:	e787      	b.n	8002e88 <__kernel_rem_pio2f+0x150>
 8002f78:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8002f7c:	e7f5      	b.n	8002f6a <__kernel_rem_pio2f+0x232>
 8002f7e:	f104 3cff 	add.w	ip, r4, #4294967295
 8002f82:	aa08      	add	r2, sp, #32
 8002f84:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8002f88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f8c:	a908      	add	r1, sp, #32
 8002f8e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8002f92:	e781      	b.n	8002e98 <__kernel_rem_pio2f+0x160>
 8002f94:	f104 3cff 	add.w	ip, r4, #4294967295
 8002f98:	aa08      	add	r2, sp, #32
 8002f9a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8002f9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002fa2:	e7f3      	b.n	8002f8c <__kernel_rem_pio2f+0x254>
 8002fa4:	a908      	add	r1, sp, #32
 8002fa6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002faa:	3801      	subs	r0, #1
 8002fac:	430a      	orrs	r2, r1
 8002fae:	e7ab      	b.n	8002f08 <__kernel_rem_pio2f+0x1d0>
 8002fb0:	3201      	adds	r2, #1
 8002fb2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8002fb6:	2e00      	cmp	r6, #0
 8002fb8:	d0fa      	beq.n	8002fb0 <__kernel_rem_pio2f+0x278>
 8002fba:	9905      	ldr	r1, [sp, #20]
 8002fbc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8002fc0:	eb0d 0001 	add.w	r0, sp, r1
 8002fc4:	18e6      	adds	r6, r4, r3
 8002fc6:	a91c      	add	r1, sp, #112	@ 0x70
 8002fc8:	f104 0c01 	add.w	ip, r4, #1
 8002fcc:	384c      	subs	r0, #76	@ 0x4c
 8002fce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8002fd2:	4422      	add	r2, r4
 8002fd4:	4562      	cmp	r2, ip
 8002fd6:	da04      	bge.n	8002fe2 <__kernel_rem_pio2f+0x2aa>
 8002fd8:	4614      	mov	r4, r2
 8002fda:	e710      	b.n	8002dfe <__kernel_rem_pio2f+0xc6>
 8002fdc:	9804      	ldr	r0, [sp, #16]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	e7e7      	b.n	8002fb2 <__kernel_rem_pio2f+0x27a>
 8002fe2:	9903      	ldr	r1, [sp, #12]
 8002fe4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002fe8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8002fec:	9105      	str	r1, [sp, #20]
 8002fee:	ee07 1a90 	vmov	s15, r1
 8002ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff6:	2400      	movs	r4, #0
 8002ff8:	ece6 7a01 	vstmia	r6!, {s15}
 8002ffc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003030 <__kernel_rem_pio2f+0x2f8>
 8003000:	46b1      	mov	r9, r6
 8003002:	455c      	cmp	r4, fp
 8003004:	dd04      	ble.n	8003010 <__kernel_rem_pio2f+0x2d8>
 8003006:	ece0 7a01 	vstmia	r0!, {s15}
 800300a:	f10c 0c01 	add.w	ip, ip, #1
 800300e:	e7e1      	b.n	8002fd4 <__kernel_rem_pio2f+0x29c>
 8003010:	ecfe 6a01 	vldmia	lr!, {s13}
 8003014:	ed39 7a01 	vldmdb	r9!, {s14}
 8003018:	3401      	adds	r4, #1
 800301a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800301e:	e7f0      	b.n	8003002 <__kernel_rem_pio2f+0x2ca>
 8003020:	0800369c 	.word	0x0800369c
 8003024:	08003670 	.word	0x08003670
 8003028:	43800000 	.word	0x43800000
 800302c:	3b800000 	.word	0x3b800000
 8003030:	00000000 	.word	0x00000000
 8003034:	9b02      	ldr	r3, [sp, #8]
 8003036:	eeb0 0a48 	vmov.f32	s0, s16
 800303a:	eba3 0008 	sub.w	r0, r3, r8
 800303e:	f7ff fdeb 	bl	8002c18 <scalbnf>
 8003042:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8003028 <__kernel_rem_pio2f+0x2f0>
 8003046:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	db19      	blt.n	8003084 <__kernel_rem_pio2f+0x34c>
 8003050:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800302c <__kernel_rem_pio2f+0x2f4>
 8003054:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003058:	aa08      	add	r2, sp, #32
 800305a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800305e:	3508      	adds	r5, #8
 8003060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003064:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800306c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003070:	ee10 3a10 	vmov	r3, s0
 8003074:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003078:	ee17 3a90 	vmov	r3, s15
 800307c:	3401      	adds	r4, #1
 800307e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003082:	e74c      	b.n	8002f1e <__kernel_rem_pio2f+0x1e6>
 8003084:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003088:	aa08      	add	r2, sp, #32
 800308a:	ee10 3a10 	vmov	r3, s0
 800308e:	e7f6      	b.n	800307e <__kernel_rem_pio2f+0x346>
 8003090:	a808      	add	r0, sp, #32
 8003092:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003096:	9001      	str	r0, [sp, #4]
 8003098:	ee07 0a90 	vmov	s15, r0
 800309c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a0:	3b01      	subs	r3, #1
 80030a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80030a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80030aa:	ed62 7a01 	vstmdb	r2!, {s15}
 80030ae:	e743      	b.n	8002f38 <__kernel_rem_pio2f+0x200>
 80030b0:	ecfc 6a01 	vldmia	ip!, {s13}
 80030b4:	ecb5 7a01 	vldmia	r5!, {s14}
 80030b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80030bc:	3001      	adds	r0, #1
 80030be:	4550      	cmp	r0, sl
 80030c0:	dc01      	bgt.n	80030c6 <__kernel_rem_pio2f+0x38e>
 80030c2:	4290      	cmp	r0, r2
 80030c4:	ddf4      	ble.n	80030b0 <__kernel_rem_pio2f+0x378>
 80030c6:	a858      	add	r0, sp, #352	@ 0x160
 80030c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80030cc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80030d0:	3b01      	subs	r3, #1
 80030d2:	e735      	b.n	8002f40 <__kernel_rem_pio2f+0x208>
 80030d4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	dc09      	bgt.n	80030ee <__kernel_rem_pio2f+0x3b6>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	dc27      	bgt.n	800312e <__kernel_rem_pio2f+0x3f6>
 80030de:	d040      	beq.n	8003162 <__kernel_rem_pio2f+0x42a>
 80030e0:	f009 0007 	and.w	r0, r9, #7
 80030e4:	b059      	add	sp, #356	@ 0x164
 80030e6:	ecbd 8b04 	vpop	{d8-d9}
 80030ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d1f5      	bne.n	80030e0 <__kernel_rem_pio2f+0x3a8>
 80030f4:	aa30      	add	r2, sp, #192	@ 0xc0
 80030f6:	1f0b      	subs	r3, r1, #4
 80030f8:	4413      	add	r3, r2
 80030fa:	461a      	mov	r2, r3
 80030fc:	4620      	mov	r0, r4
 80030fe:	2800      	cmp	r0, #0
 8003100:	dc50      	bgt.n	80031a4 <__kernel_rem_pio2f+0x46c>
 8003102:	4622      	mov	r2, r4
 8003104:	2a01      	cmp	r2, #1
 8003106:	dc5d      	bgt.n	80031c4 <__kernel_rem_pio2f+0x48c>
 8003108:	ab30      	add	r3, sp, #192	@ 0xc0
 800310a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8003030 <__kernel_rem_pio2f+0x2f8>
 800310e:	440b      	add	r3, r1
 8003110:	2c01      	cmp	r4, #1
 8003112:	dc67      	bgt.n	80031e4 <__kernel_rem_pio2f+0x4ac>
 8003114:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8003118:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800311c:	2e00      	cmp	r6, #0
 800311e:	d167      	bne.n	80031f0 <__kernel_rem_pio2f+0x4b8>
 8003120:	edc7 6a00 	vstr	s13, [r7]
 8003124:	ed87 7a01 	vstr	s14, [r7, #4]
 8003128:	edc7 7a02 	vstr	s15, [r7, #8]
 800312c:	e7d8      	b.n	80030e0 <__kernel_rem_pio2f+0x3a8>
 800312e:	ab30      	add	r3, sp, #192	@ 0xc0
 8003130:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8003030 <__kernel_rem_pio2f+0x2f8>
 8003134:	440b      	add	r3, r1
 8003136:	4622      	mov	r2, r4
 8003138:	2a00      	cmp	r2, #0
 800313a:	da24      	bge.n	8003186 <__kernel_rem_pio2f+0x44e>
 800313c:	b34e      	cbz	r6, 8003192 <__kernel_rem_pio2f+0x45a>
 800313e:	eef1 7a47 	vneg.f32	s15, s14
 8003142:	edc7 7a00 	vstr	s15, [r7]
 8003146:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800314a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800314e:	aa31      	add	r2, sp, #196	@ 0xc4
 8003150:	2301      	movs	r3, #1
 8003152:	429c      	cmp	r4, r3
 8003154:	da20      	bge.n	8003198 <__kernel_rem_pio2f+0x460>
 8003156:	b10e      	cbz	r6, 800315c <__kernel_rem_pio2f+0x424>
 8003158:	eef1 7a67 	vneg.f32	s15, s15
 800315c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003160:	e7be      	b.n	80030e0 <__kernel_rem_pio2f+0x3a8>
 8003162:	ab30      	add	r3, sp, #192	@ 0xc0
 8003164:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8003030 <__kernel_rem_pio2f+0x2f8>
 8003168:	440b      	add	r3, r1
 800316a:	2c00      	cmp	r4, #0
 800316c:	da05      	bge.n	800317a <__kernel_rem_pio2f+0x442>
 800316e:	b10e      	cbz	r6, 8003174 <__kernel_rem_pio2f+0x43c>
 8003170:	eef1 7a67 	vneg.f32	s15, s15
 8003174:	edc7 7a00 	vstr	s15, [r7]
 8003178:	e7b2      	b.n	80030e0 <__kernel_rem_pio2f+0x3a8>
 800317a:	ed33 7a01 	vldmdb	r3!, {s14}
 800317e:	3c01      	subs	r4, #1
 8003180:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003184:	e7f1      	b.n	800316a <__kernel_rem_pio2f+0x432>
 8003186:	ed73 7a01 	vldmdb	r3!, {s15}
 800318a:	3a01      	subs	r2, #1
 800318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003190:	e7d2      	b.n	8003138 <__kernel_rem_pio2f+0x400>
 8003192:	eef0 7a47 	vmov.f32	s15, s14
 8003196:	e7d4      	b.n	8003142 <__kernel_rem_pio2f+0x40a>
 8003198:	ecb2 7a01 	vldmia	r2!, {s14}
 800319c:	3301      	adds	r3, #1
 800319e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031a2:	e7d6      	b.n	8003152 <__kernel_rem_pio2f+0x41a>
 80031a4:	ed72 7a01 	vldmdb	r2!, {s15}
 80031a8:	edd2 6a01 	vldr	s13, [r2, #4]
 80031ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80031b0:	3801      	subs	r0, #1
 80031b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031b6:	ed82 7a00 	vstr	s14, [r2]
 80031ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031be:	edc2 7a01 	vstr	s15, [r2, #4]
 80031c2:	e79c      	b.n	80030fe <__kernel_rem_pio2f+0x3c6>
 80031c4:	ed73 7a01 	vldmdb	r3!, {s15}
 80031c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80031cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80031d0:	3a01      	subs	r2, #1
 80031d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031d6:	ed83 7a00 	vstr	s14, [r3]
 80031da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031de:	edc3 7a01 	vstr	s15, [r3, #4]
 80031e2:	e78f      	b.n	8003104 <__kernel_rem_pio2f+0x3cc>
 80031e4:	ed33 7a01 	vldmdb	r3!, {s14}
 80031e8:	3c01      	subs	r4, #1
 80031ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031ee:	e78f      	b.n	8003110 <__kernel_rem_pio2f+0x3d8>
 80031f0:	eef1 6a66 	vneg.f32	s13, s13
 80031f4:	eeb1 7a47 	vneg.f32	s14, s14
 80031f8:	edc7 6a00 	vstr	s13, [r7]
 80031fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8003200:	eef1 7a67 	vneg.f32	s15, s15
 8003204:	e790      	b.n	8003128 <__kernel_rem_pio2f+0x3f0>
 8003206:	bf00      	nop

08003208 <floorf>:
 8003208:	ee10 3a10 	vmov	r3, s0
 800320c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003210:	3a7f      	subs	r2, #127	@ 0x7f
 8003212:	2a16      	cmp	r2, #22
 8003214:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003218:	dc2b      	bgt.n	8003272 <floorf+0x6a>
 800321a:	2a00      	cmp	r2, #0
 800321c:	da12      	bge.n	8003244 <floorf+0x3c>
 800321e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003284 <floorf+0x7c>
 8003222:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003226:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	dd06      	ble.n	800323e <floorf+0x36>
 8003230:	2b00      	cmp	r3, #0
 8003232:	da24      	bge.n	800327e <floorf+0x76>
 8003234:	2900      	cmp	r1, #0
 8003236:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <floorf+0x80>)
 8003238:	bf08      	it	eq
 800323a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800323e:	ee00 3a10 	vmov	s0, r3
 8003242:	4770      	bx	lr
 8003244:	4911      	ldr	r1, [pc, #68]	@ (800328c <floorf+0x84>)
 8003246:	4111      	asrs	r1, r2
 8003248:	420b      	tst	r3, r1
 800324a:	d0fa      	beq.n	8003242 <floorf+0x3a>
 800324c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8003284 <floorf+0x7c>
 8003250:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003254:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	ddef      	ble.n	800323e <floorf+0x36>
 800325e:	2b00      	cmp	r3, #0
 8003260:	bfbe      	ittt	lt
 8003262:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8003266:	fa40 f202 	asrlt.w	r2, r0, r2
 800326a:	189b      	addlt	r3, r3, r2
 800326c:	ea23 0301 	bic.w	r3, r3, r1
 8003270:	e7e5      	b.n	800323e <floorf+0x36>
 8003272:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8003276:	d3e4      	bcc.n	8003242 <floorf+0x3a>
 8003278:	ee30 0a00 	vadd.f32	s0, s0, s0
 800327c:	4770      	bx	lr
 800327e:	2300      	movs	r3, #0
 8003280:	e7dd      	b.n	800323e <floorf+0x36>
 8003282:	bf00      	nop
 8003284:	7149f2ca 	.word	0x7149f2ca
 8003288:	bf800000 	.word	0xbf800000
 800328c:	007fffff 	.word	0x007fffff

08003290 <_init>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr

0800329c <_fini>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	bf00      	nop
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr
